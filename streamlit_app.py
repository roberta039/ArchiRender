import streamlit as st
import pandas as pd
import numpy as np
import requests
import smtplib
import os
import json
from datetime import datetime, timedelta
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import sqlite3
from sqlite3 import Error
import time
from dotenv import load_dotenv
import threading
from queue import Queue

# √éncarcƒÉ variabilele de mediu
load_dotenv()

# Configurare paginƒÉ
st.set_page_config(
    page_title="Rendering Service ARH",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Stiluri CSS personalizate
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .status-pending { background-color: #fff3cd; padding: 10px; border-radius: 5px; }
    .status-processing { background-color: #cce5ff; padding: 10px; border-radius: 5px; }
    .status-completed { background-color: #d4edda; padding: 10px; border-radius: 5px; }
    .urgent { border-left: 5px solid #dc3545; padding-left: 10px; }
    .deleted { background-color: #f8d7da; padding: 10px; border-radius: 5px; text-decoration: line-through; }
    .progress-bar { background-color: #f0f0f0; border-radius: 10px; margin: 10px 0; }
    .progress-fill { background-color: #28a745; height: 20px; border-radius: 10px; text-align: center; color: white; font-weight: bold; }
    .notification { background-color: #e7f3ff; padding: 15px; border-radius: 10px; border-left: 5px solid #1f77b4; margin: 10px 0; }
    .notification-success { background-color: #d4edda; border-left: 5px solid #28a745; }
    .notification-warning { background-color: #fff3cd; border-left: 5px solid #ffc107; }
    .notification-error { background-color: #f8d7da; border-left: 5px solid #dc3545; }
    .slogan-text {
        font-style: italic;
        color: #666;
        font-size: 14px;
        font-family: 'Source Sans Pro', sans-serif;
        text-align: center;
        margin-top: -10px;
        margin-bottom: 20px;
    }
    .admin-clickable {
        cursor: pointer;
        color: #666;
        font-style: italic;
    }
    .admin-clickable:hover {
        color: #1f77b4;
        text-decoration: underline;
    }
</style>
""", unsafe_allow_html=True)

class NotificationService:
    def __init__(self):
        self.notification_queue = Queue()
    
    def add_notification(self, order_id, message, type="info", recipient_email=None):
        """AdaugƒÉ o notificare √Æn coadƒÉ"""
        notification = {
            'order_id': order_id,
            'message': message,
            'type': type,
            'recipient_email': recipient_email,
            'timestamp': datetime.now(),
            'read': False
        }
        self.notification_queue.put(notification)
        self.save_notification_to_db(notification)
    
    def save_notification_to_db(self, notification):
        """SalveazƒÉ notificarea √Æn baza de date"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO notifications 
                (order_id, message, type, recipient_email, timestamp, read)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                notification['order_id'],
                notification['message'],
                notification['type'],
                notification['recipient_email'],
                notification['timestamp'],
                notification['read']
            ))
            
            conn.commit()
            conn.close()
        except Error as e:
            print(f"Eroare la salvarea notificƒÉrii: {e}")
    
    def get_notifications(self, order_id=None, unread_only=False):
        """ReturneazƒÉ notificƒÉrile"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            
            if order_id:
                if unread_only:
                    df = pd.read_sql_query(
                        "SELECT * FROM notifications WHERE order_id = ? AND read = 0 ORDER BY timestamp DESC", 
                        conn, params=[order_id]
                    )
                else:
                    df = pd.read_sql_query(
                        "SELECT * FROM notifications WHERE order_id = ? ORDER BY timestamp DESC", 
                        conn, params=[order_id]
                    )
            else:
                if unread_only:
                    df = pd.read_sql_query(
                        "SELECT * FROM notifications WHERE read = 0 ORDER BY timestamp DESC", 
                        conn
                    )
                else:
                    df = pd.read_sql_query(
                        "SELECT * FROM notifications ORDER BY timestamp DESC", 
                        conn
                    )
            
            conn.close()
            return df
        except Error as e:
            print(f"Eroare la citirea notificƒÉrilor: {e}")
            return pd.DataFrame()
    
    def mark_as_read(self, notification_id):
        """MarcheazƒÉ o notificare ca cititƒÉ"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('UPDATE notifications SET read = 1 WHERE id = ?', (notification_id,))
            
            conn.commit()
            conn.close()
            return True
        except Error as e:
            print(f"Eroare la marcarea notificƒÉrii ca cititƒÉ: {e}")
            return False

class RenderingService:
    def __init__(self):
        self.init_database()
        self.notification_service = NotificationService()
    
    def init_database(self):
        """InitializeazƒÉ baza de date SQLite"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            # Tabela pentru comenzi
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    student_name TEXT NOT NULL,
                    email TEXT NOT NULL,
                    project_file TEXT,
                    project_link TEXT,
                    software TEXT NOT NULL,
                    resolution TEXT NOT NULL,
                    render_count INTEGER NOT NULL,
                    deadline TEXT,
                    requirements TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    completed_at TIMESTAMP,
                    download_link TEXT,
                    price_euro REAL NOT NULL,
                    payment_status TEXT DEFAULT 'pending',
                    payment_date TIMESTAMP,
                    receipt_sent BOOLEAN DEFAULT FALSE,
                    estimated_days INTEGER NOT NULL,
                    is_urgent BOOLEAN DEFAULT FALSE,
                    contact_phone TEXT,
                    faculty TEXT,
                    is_deleted BOOLEAN DEFAULT FALSE,
                    deleted_at TIMESTAMP,
                    deletion_reason TEXT,
                    progress INTEGER DEFAULT 0,
                    current_stage TEXT DEFAULT '√én a»ôteptare',
                    stages_completed INTEGER DEFAULT 0,
                    total_stages INTEGER DEFAULT 6,
                    progress_email_sent BOOLEAN DEFAULT FALSE,
                    completed_email_sent BOOLEAN DEFAULT FALSE,
                    status_email_sent BOOLEAN DEFAULT FALSE
                )
            ''')
            
            # Tabela pentru notificƒÉri
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS notifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER NOT NULL,
                    message TEXT NOT NULL,
                    type TEXT DEFAULT 'info',
                    recipient_email TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    read BOOLEAN DEFAULT FALSE,
                    FOREIGN KEY (order_id) REFERENCES orders (id)
                )
            ''')
            
            # Tabela pentru istoricul progresului
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS progress_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER NOT NULL,
                    stage TEXT NOT NULL,
                    progress INTEGER NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    notes TEXT,
                    FOREIGN KEY (order_id) REFERENCES orders (id)
                )
            ''')
            
            conn.commit()
            conn.close()
        except Error as e:
            st.error(f"‚ùå Eroare la initializarea bazei de date: {e}")
    
    def calculate_price_and_days(self, resolution, render_count, is_urgent=False):
        """CalculeazƒÉ pre»õul »ôi timpul de livrare"""
        # Pre»õuri dupƒÉ rezolu»õie
        price_map = {
            "2-4K": 70,
            "4-6K": 100, 
            "8K+": 120
        }
        
        # Zile de livrare dupƒÉ numƒÉrul de randƒÉri
        days_map = {
            1: 3, 2: 3, 3: 3,
            4: 6, 5: 6, 6: 6, 7: 6,
            8: 9, 9: 9, 10: 9,
            11: 12, 12: 12, 13: 12,
            14: 15, 15: 15
        }
        
        # Calcul zile (din 3 √Æn 3 peste 15)
        if render_count > 15:
            estimated_days = ((render_count - 1) // 3) * 3 + 3
        else:
            estimated_days = days_map.get(render_count, 3)
        
        # Ajustare pentru urgent
        if is_urgent:
            estimated_days = max(1, estimated_days // 2)  # Reduce timpul la jumƒÉtate
            urgent_surcharge = 0.5  # +50% pentru urgent
        else:
            urgent_surcharge = 0
        
        base_price = price_map.get(resolution, 70)
        final_price = base_price * (1 + urgent_surcharge)
        
        return round(final_price), estimated_days
    
    def add_order(self, order_data):
        """AdaugƒÉ o comandƒÉ nouƒÉ √Æn baza de date"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO orders 
                (student_name, email, project_file, project_link, software, resolution, 
                 render_count, deadline, requirements, price_euro, estimated_days,
                 is_urgent, contact_phone, faculty, total_stages)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                order_data['student_name'],
                order_data['email'],
                order_data.get('project_file'),
                order_data.get('project_link'),
                order_data['software'],
                order_data['resolution'],
                order_data['render_count'],
                order_data['deadline'],
                order_data['requirements'],
                order_data['price_euro'],
                order_data['estimated_days'],
                order_data.get('is_urgent', False),
                order_data.get('contact_phone', ''),
                order_data.get('faculty', ''),
                6  # total_stages
            ))
            
            order_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            # AdaugƒÉ notificare pentru noua comandƒÉ
            self.notification_service.add_notification(
                order_id,
                f"üéâ Comanda #{order_id} a fost plasatƒÉ cu succes! Timp de procesare estimat: {order_data['estimated_days']} zile.",
                "success",
                order_data['email']
            )
            
            # Trimite email cu chitan»õƒÉ
            self.send_receipt_email(order_data, order_id)
            
            return order_id
        except Error as e:
            st.error(f"‚ùå Eroare la adƒÉugarea comenzii: {e}")
            return None
    
    def send_receipt_email(self, order_data, order_id):
        """Trimite email cu chitan»õƒÉ »ôi detalii comanda"""
        try:
            smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            smtp_port = int(os.getenv('SMTP_PORT', 587))
            email_from = os.getenv('EMAIL_FROM', '')
            email_password = os.getenv('EMAIL_PASSWORD', '')
            
            if not all([smtp_server, email_from, email_password]):
                st.warning("""
                ‚ö†Ô∏è **Configura»õia email nu este completƒÉ.** 
                
                Pentru a activa notificƒÉrile email, adaugƒÉ urmƒÉtoarele variabile √Æn fi»ôierul `.env`:
                ```
                SMTP_SERVER=smtp.gmail.com
                SMTP_PORT=587
                EMAIL_FROM=emailul.tau@gmail.com
                EMAIL_PASSWORD=parola_ta_de_aplicatie
                ```
                """)
                return
            
            # Email cƒÉtre client
            msg_client = MIMEMultipart()
            msg_client.attach(MIMEText(f"""
            üßæ CHI»öAN»öƒÇ PLATƒÇ RENDERING SERVICE

            Mul»õumim pentru comanda ta, {order_data['student_name']}!
            
            üìã DETALII COMANDA:
            ‚Ä¢ ID ComandƒÉ: #{order_id}
            ‚Ä¢ Data: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            ‚Ä¢ SumƒÉ plƒÉtitƒÉ: {order_data['price_euro']} EUR
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ NumƒÉr randƒÉri: {order_data['render_count']}
            ‚Ä¢ Software: {order_data['software']}
            
            üí≥ DETALII PLATƒÇ:
            ‚Ä¢ Revolut: https://revolut.me/stefanxuhy
            ‚Ä¢ Transfer Bancar:
              - Beneficiar: STEFANIA BOSTIOG
              - IBAN: RO60 BREL 0002 0036 6187 0100
              - BancƒÉ: Libra Bank
              - SumƒÉ: {order_data['price_euro']} EUR
            
            ‚è∞ DETALII LIVRARE:
            ‚Ä¢ Timp estimat: {order_data['estimated_days']} zile lucrƒÉtoare
            ‚Ä¢ Data estimatƒÉ livrare: {(datetime.now() + timedelta(days=order_data['estimated_days'])).strftime('%d.%m.%Y')}
            ‚Ä¢ Status: ‚è≥ √én a»ôteptare procesare
            
            üîî NOTIFICƒÇRI:
            ‚Ä¢ Vei primi o notificare c√¢nd √Æncepe procesarea
            ‚Ä¢ Vei primi o notificare c√¢nd rendering-ul este gata
            ‚Ä¢ Link download va fi trimis la finalizare
            
            üìã SPECIFICA»öII:
            {order_data['requirements'] or 'Niciune specificate'}
            
            üìû SUPPORT:
            ‚Ä¢ Email: bostiogstefania@gmail.com
            ‚Ä¢ Telefon: +40 724 911 299
            
            Mul»õumim pentru √Æncredere!
            üèóÔ∏è Echipa Rendering Service ARH
            """, 'plain', 'utf-8'))
            
            msg_client['From'] = email_from
            msg_client['To'] = order_data['email']
            msg_client['Subject'] = f"üßæ Chitan»õƒÉ Rendering #{order_id} - {order_data['price_euro']} EUR"
            
            # Email cƒÉtre administrator
            msg_admin = MIMEMultipart()
            msg_admin.attach(MIMEText(f"""
            üí∞ COMANDA NOUƒÇ PLƒÇTITƒÇ!

            üìã DETALII CLIENT:
            ‚Ä¢ Nume: {order_data['student_name']}
            ‚Ä¢ Email: {order_data['email']}
            ‚Ä¢ Telefon: {order_data.get('contact_phone', 'Nespecificat')}
            ‚Ä¢ Facultate: {order_data.get('faculty', 'NespecificatƒÉ')}
            
            üí∂ DETALII FINANCIARE:
            ‚Ä¢ ID ComandƒÉ: #{order_id}
            ‚Ä¢ SumƒÉ: {order_data['price_euro']} EUR
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ RandƒÉri: {order_data['render_count']}
            ‚Ä¢ Zile estimare: {order_data['estimated_days']}
            ‚Ä¢ Urgent: {'DA' if order_data.get('is_urgent') else 'NU'}
            
            üõ†Ô∏è DETALII PROIECT:
            ‚Ä¢ Software: {order_data['software']}
            ‚Ä¢ Cerin»õe: {order_data['requirements'] or 'Niciune'}
            ‚Ä¢ Fi»ôier: {'√éncƒÉrcat' if order_data.get('project_file') else 'Link: ' + order_data.get('project_link', 'N/A')}
            
            ‚ö° AC»öIUNE NECESARƒÇ:
            1. VerificƒÉ fi»ôierul/link-ul proiectului
            2. ConfirmƒÉ clientului primirea
            3. √éncepe procesarea
            
            ‚è∞ Termen limitƒÉ: {(datetime.now() + timedelta(days=order_data['estimated_days'])).strftime('%d.%m.%Y')}
            """, 'plain', 'utf-8'))
            
            msg_admin['From'] = email_from
            msg_admin['To'] = "bostiogstefania@gmail.com"
            msg_admin['Subject'] = f"üí∞ COMANDA NOUƒÇ #{order_id} - {order_data['price_euro']} EUR"
            
            # Trimite ambele email-uri
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.send_message(msg_client)
            server.send_message(msg_admin)
            server.quit()
            
            # MarcheazƒÉ chitan»õa trimisƒÉ
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE orders SET receipt_sent = 1 WHERE id = ?', (order_id,))
            conn.commit()
            conn.close()
            
            st.success("üìß Chitan»õƒÉ trimisƒÉ pe email!")
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Emailurile nu au putut fi trimise: {e}")

    def send_status_email(self, order_data, old_status, new_status):
        """Trimite email cu notificare schimbare status"""
        try:
            smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            smtp_port = int(os.getenv('SMTP_PORT', 587))
            email_from = os.getenv('EMAIL_FROM', '')
            email_password = os.getenv('EMAIL_PASSWORD', '')
            
            if not all([smtp_server, email_from, email_password]):
                return False
            
            status_messages = {
                'pending': '‚è≥ √én a»ôteptare procesare',
                'processing': 'üöÄ Procesare √Æn curs', 
                'completed': '‚úÖ Finalizat'
            }
            
            msg = MIMEMultipart()
            msg.attach(MIMEText(f"""
            üîî ACTUALIZARE STATUS - Rendering #{order_data['id']}

            BunƒÉ {order_data['student_name']},
            
            Statusul comenzii tale s-a actualizat!
            
            üìä **STATUS NOU:**
            ‚Ä¢ De la: {status_messages.get(old_status, old_status)}
            ‚Ä¢ La: {status_messages.get(new_status, new_status)}
            
            üéØ **DETALII COMANDA:**
            ‚Ä¢ ID ComandƒÉ: #{order_data['id']}
            ‚Ä¢ Software: {order_data['software']}
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ NumƒÉr randƒÉri: {order_data['render_count']}
            ‚Ä¢ Progres curent: {order_data['progress']}%
            
            ‚è∞ **TERMEN ESTIMAT:**
            Data estimatƒÉ de finalizare: {order_data['deadline']}
            
            {'üì• **DESCƒÇRCARE:**' + chr(10) + 'Proiectul tƒÉu este gata! Po»õi descƒÉrca fi»ôierele de aici:' + chr(10) + order_data['download_link'] if new_status == 'completed' and order_data.get('download_link') else ''}
            
            üìû **SUPPORT:**
            ‚Ä¢ Email: bostiogstefania@gmail.com
            ‚Ä¢ Telefon: +40 724 911 299
            
            Mul»õumim pentru √Æncredere!
            üèóÔ∏è Echipa Rendering Service ARH
            """, 'plain', 'utf-8'))
            
            msg['From'] = email_from
            msg['To'] = order_data['email']
            msg['Subject'] = f"üîî Status Actualizat - Rendering #{order_data['id']} - {status_messages.get(new_status, new_status)}"
            
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.send_message(msg)
            server.quit()
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Eroare la trimiterea email-ului de status: {e}")
            return False

    def send_progress_email(self, order_data, progress, current_stage, notes=""):
        """Trimite email cu notificare progres cƒÉtre client"""
        try:
            smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            smtp_port = int(os.getenv('SMTP_PORT', 587))
            email_from = os.getenv('EMAIL_FROM', '')
            email_password = os.getenv('EMAIL_PASSWORD', '')
            
            if not all([smtp_server, email_from, email_password]):
                return False
            
            msg = MIMEMultipart()
            msg.attach(MIMEText(f"""
            üöÄ PROCESARE √éN CURS - Rendering #{order_data['id']}

            BunƒÉ {order_data['student_name']},
            
            Procesarea rendering-ului tƒÉu a √Ænceput!
            
            üìä **STADIUL ACTUAL:**
            ‚Ä¢ Progres: {progress}%
            ‚Ä¢ EtapƒÉ: {current_stage}
            ‚Ä¢ Status: Procesare √Æn curs
            
            üéØ **DETALII COMANDA:**
            ‚Ä¢ ID ComandƒÉ: #{order_data['id']}
            ‚Ä¢ Software: {order_data['software']}
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ NumƒÉr randƒÉri: {order_data['render_count']}
            
            ‚è∞ **TERMEN ESTIMAT:**
            Data estimatƒÉ de finalizare: {order_data['deadline']}
            
            üìù **DETALII PROIECT:**
            {notes or 'Procesare √Æn conformitate cu specifica»õiile tale'}
            
            üîî **URMƒÇTOAREA NOTIFICARE:**
            Vei primi un email c√¢nd rendering-ul va fi complet finalizat »ôi gata pentru descƒÉrcare.
            
            üìû **SUPPORT:**
            ‚Ä¢ Email: bostiogstefania@gmail.com
            ‚Ä¢ Telefon: +40 724 911 299
            
            Mul»õumim pentru √Æncredere!
            üèóÔ∏è Echipa Rendering Service ARH
            """, 'plain', 'utf-8'))
            
            msg['From'] = email_from
            msg['To'] = order_data['email']
            msg['Subject'] = f"üöÄ Procesare Rendering #{order_data['id']} - √én curs"
            
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.send_message(msg)
            server.quit()
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Eroare la trimiterea email-ului de progres: {e}")
            return False

    def send_completion_email(self, order_data, download_link=None):
        """Trimite email cu notificare finalizare cƒÉtre client"""
        try:
            smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            smtp_port = int(os.getenv('SMTP_PORT', 587))
            email_from = os.getenv('EMAIL_FROM', '')
            email_password = os.getenv('EMAIL_PASSWORD', '')
            
            if not all([smtp_server, email_from, email_password]):
                return False
            
            download_section = ""
            if download_link:
                download_section = f"""
                üì• **DESCƒÇRCARE:**
                Proiectul tƒÉu este gata! Po»õi descƒÉrca fi»ôierele de aici:
                {download_link}
                """
            else:
                download_section = """
                üì• **DESCƒÇRCARE:**
                Proiectul tƒÉu este gata! Vei primi link-ul de descƒÉrcare √Æn scurt timp.
                """
            
            msg = MIMEMultipart()
            msg.attach(MIMEText(f"""
            ‚úÖ RENDERING FINALIZAT - #{order_data['id']}

            BunƒÉ {order_data['student_name']},
            
            Rendering-ul tƒÉu este finalizat »ôi gata!
            
            üéâ **PROIECT FINALIZAT:**
            ‚Ä¢ Status: 100% Complet
            ‚Ä¢ Data finalizare: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            ‚Ä¢ Calitate: Conform specifica»õiilor
            
            üéØ **DETALII COMANDA:**
            ‚Ä¢ ID ComandƒÉ: #{order_data['id']}
            ‚Ä¢ Software: {order_data['software']}
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ NumƒÉr randƒÉri: {order_data['render_count']}
            
            {download_section}
            
            üìã **SPECIFICA»öII PROCESATE:**
            {order_data['requirements'] or 'Toate specifica»õiile au fost respectate'}
            
            ‚≠ê **FEEDBACK:**
            DacƒÉ e»ôti mul»õumit de rezultat, te rugƒÉm sƒÉ ne la»ôi un review!
            
            üìû **SUPPORT:**
            ‚Ä¢ Email: bostiogstefania@gmail.com
            ‚Ä¢ Telefon: +40 724 911 299
            
            Mul»õumim cƒÉ ai ales serviciile noastre!
            üèóÔ∏è Echipa Rendering Service ARH
            """, 'plain', 'utf-8'))
            
            msg['From'] = email_from
            msg['To'] = order_data['email']
            msg['Subject'] = f"‚úÖ Rendering Finalizat #{order_data['id']} - Gata pentru descƒÉrcare"
            
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.send_message(msg)
            server.quit()
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Eroare la trimiterea email-ului de finalizare: {e}")
            return False
    
    def get_orders(self, status=None, include_deleted=False):
        """ReturneazƒÉ toate comenzile"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            
            if status:
                if include_deleted:
                    df = pd.read_sql_query(
                        "SELECT * FROM orders WHERE status = ? ORDER BY created_at DESC", 
                        conn, params=[status]
                    )
                else:
                    df = pd.read_sql_query(
                        "SELECT * FROM orders WHERE status = ? AND is_deleted = 0 ORDER BY created_at DESC", 
                        conn, params=[status]
                    )
            else:
                if include_deleted:
                    df = pd.read_sql_query(
                        "SELECT * FROM orders ORDER BY created_at DESC", 
                        conn
                    )
                else:
                    df = pd.read_sql_query(
                        "SELECT * FROM orders WHERE is_deleted = 0 ORDER BY created_at DESC", 
                        conn
                    )
            
            conn.close()
            return df
        except Error as e:
            st.error(f"‚ùå Eroare la citirea comenzilor: {e}")
            return pd.DataFrame()
    
    def update_order_status(self, order_id, status, download_link=None):
        """ActualizeazƒÉ statusul unei comenzi »ôi trimite notificƒÉri"""
        try:
            # Ob»õine starea anterioarƒÉ
            order = self.get_order_by_id(order_id)
            if order.empty:
                return False
                
            old_status = order.iloc[0]['status']
            order_data = order.iloc[0]
            
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            if download_link:
                cursor.execute('''
                    UPDATE orders 
                    SET status = ?, completed_at = CURRENT_TIMESTAMP, download_link = ?
                    WHERE id = ?
                ''', (status, download_link, order_id))
            else:
                cursor.execute('''
                    UPDATE orders 
                    SET status = ? 
                    WHERE id = ?
                ''', (status, order_id))
            
            conn.commit()
            conn.close()
            
            # AdaugƒÉ notificare pentru schimbarea statusului
            self.notification_service.add_notification(
                order_id,
                f"üìä Status comanda actualizat: {old_status.upper()} ‚Üí {status.upper()}",
                "info",
                order_data['email']
            )
            
            # Trimite email de notificare status DOAR dacƒÉ statusul s-a schimbƒÉ
            if old_status != status:
                # VerificƒÉ dacƒÉ email-ul de status a fost deja trimis pentru aceastƒÉ schimbare
                if not order_data.get('status_email_sent', False) or True:  # For»õeazƒÉ trimiterea pentru testare
                    email_sent = self.send_status_email(order_data, old_status, status)
                    
                    # MarcheazƒÉ cƒÉ email-ul de status a fost trimis
                    if email_sent:
                        conn = sqlite3.connect('rendering_orders.db')
                        cursor = conn.cursor()
                        cursor.execute('UPDATE orders SET status_email_sent = 1 WHERE id = ?', (order_id,))
                        conn.commit()
                        conn.close()
            
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la actualizarea comenzii: {e}")
            return False

    def update_progress(self, order_id, progress, current_stage, notes=""):
        """ActualizeazƒÉ progresul unei comenzi »ôi trimite notificƒÉri"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            # Ob»õine starea anterioarƒÉ pentru a verifica dacƒÉ trebuie sƒÉ trimitem email
            order = self.get_order_by_id(order_id)
            if order.empty:
                return False
                
            previous_progress = order.iloc[0]['progress']
            progress_email_sent = order.iloc[0]['progress_email_sent']
            completed_email_sent = order.iloc[0]['completed_email_sent']
            
            # CalculeazƒÉ numƒÉrul de etape completate
            stages_completed = int((progress / 100) * 6)  # 6 etape totale
            
            cursor.execute('''
                UPDATE orders 
                SET progress = ?, current_stage = ?, stages_completed = ?
                WHERE id = ?
            ''', (progress, current_stage, stages_completed, order_id))
            
            # SalveazƒÉ √Æn istoricul progresului
            cursor.execute('''
                INSERT INTO progress_history (order_id, stage, progress, notes)
                VALUES (?, ?, ?, ?)
            ''', (order_id, current_stage, progress, notes))
            
            conn.commit()
            conn.close()
            
            # Ob»õine datele complete ale comenzii pentru email
            order = self.get_order_by_id(order_id)
            if not order.empty:
                order_data = order.iloc[0]
                
                # AdaugƒÉ notificare pentru progres
                self.notification_service.add_notification(
                    order_id,
                    f"üìà Progres actualizat: {progress}% - {current_stage}",
                    "info",
                    order_data['email']
                )
                
                # NOTIFICARE 1: Procesare √ÆnceputƒÉ (doar o datƒÉ)
                if progress >= 10 and not progress_email_sent and previous_progress < 10:
                    success = self.send_progress_email(order_data, progress, current_stage, notes)
                    if success:
                        # MarcheazƒÉ cƒÉ email-ul de progres a fost trimis
                        conn = sqlite3.connect('rendering_orders.db')
                        cursor = conn.cursor()
                        cursor.execute('UPDATE orders SET progress_email_sent = 1 WHERE id = ?', (order_id,))
                        conn.commit()
                        conn.close()
                        print(f"‚úÖ Email progres trimis pentru comanda #{order_id}")
                
                # NOTIFICARE 2: Finalizare (doar o datƒÉ)
                if progress == 100 and not completed_email_sent:
                    download_link = order_data['download_link']
                    success = self.send_completion_email(order_data, download_link)
                    if success:
                        # MarcheazƒÉ cƒÉ email-ul de finalizare a fost trimis
                        conn = sqlite3.connect('rendering_orders.db')
                        cursor = conn.cursor()
                        cursor.execute('UPDATE orders SET completed_email_sent = 1 WHERE id = ?', (order_id,))
                        conn.commit()
                        conn.close()
                        print(f"‚úÖ Email finalizare trimis pentru comanda #{order_id}")
            
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la actualizarea progresului: {e}")
            return False

    def get_order_by_id(self, order_id):
        """ReturneazƒÉ o comandƒÉ dupƒÉ ID"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            df = pd.read_sql_query(
                "SELECT * FROM orders WHERE id = ?", 
                conn, params=[order_id]
            )
            conn.close()
            return df
        except Error as e:
            st.error(f"‚ùå Eroare la citirea comenzii: {e}")
            return pd.DataFrame()

    def get_progress_history(self, order_id):
        """ReturneazƒÉ istoricul progresului pentru o comandƒÉ"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            df = pd.read_sql_query(
                "SELECT * FROM progress_history WHERE order_id = ? ORDER BY timestamp DESC", 
                conn, params=[order_id]
            )
            conn.close()
            return df
        except Error as e:
            st.error(f"‚ùå Eroare la citirea istoricului: {e}")
            return pd.DataFrame()

    def delete_order(self, order_id, reason=""):
        """MarcheazƒÉ o comandƒÉ ca »ôtearsƒÉ"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE orders 
                SET is_deleted = 1, deleted_at = CURRENT_TIMESTAMP, deletion_reason = ?
                WHERE id = ?
            ''', (reason, order_id))
            
            conn.commit()
            conn.close()
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la »ôtergerea comenzii: {e}")
            return False

    def restore_order(self, order_id):
        """Restabile»ôte o comandƒÉ »ôtearsƒÉ"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE orders 
                SET is_deleted = 0, deleted_at = NULL, deletion_reason = NULL
                WHERE id = ?
            ''', (order_id,))
            
            conn.commit()
            conn.close()
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la restabilirea comenzii: {e}")
            return False

    def permanently_delete_order(self, order_id):
        """»òterge definitiv o comandƒÉ din baza de date"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('DELETE FROM orders WHERE id = ?', (order_id,))
            
            conn.commit()
            conn.close()
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la »ôtergerea definitivƒÉ a comenzii: {e}")
            return False

def display_progress_bar(progress, current_stage):
    """Afi»ôeazƒÉ o barƒÉ de progres"""
    st.markdown(f"""
    <div class="progress-bar">
        <div class="progress-fill" style="width: {progress}%">
            {progress}% - {current_stage}
        </div>
    </div>
    """, unsafe_allow_html=True)

def display_notification(message, type="info"):
    """Afi»ôeazƒÉ o notificare"""
    css_class = {
        "info": "notification",
        "success": "notification-success", 
        "warning": "notification-warning",
        "error": "notification-error"
    }.get(type, "notification")
    
    st.markdown(f"""
    <div class="{css_class}">
        {message}
    </div>
    """, unsafe_allow_html=True)

def main():
    st.markdown('<h1 class="main-header">üèóÔ∏è Rendering Service ARH</h1>', unsafe_allow_html=True)
    st.markdown("### Serviciu profesional de rendering pentru studen»õii la arhitecturƒÉ")
    
    # Ini»õializeazƒÉ serviciul
    service = RenderingService()
    
    # Sidebar pentru navigare
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center;">
            <h1>üèóÔ∏è</h1>
            <h3>Rendering Service</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Slogan cu buton ascuns pentru administrare
        st.markdown("""
        <div style="text-align: center; margin-bottom: 20px;">
            <p class="slogan-text">
                <span class="admin-clickable" onclick="this.parentNode.querySelector('input').value='admin'">Profesional</span> ‚Ä¢ 
                <span>Rapid</span> ‚Ä¢ 
                <span>Calitate</span>
            </p>
            <input type="text" style="display: none;">
        </div>
        """, unsafe_allow_html=True)
        
        # Buton ascuns pentru a detecta click-ul
        if st.button("Acces Administrare", key="admin_access", help="Click pe 'Profesional' pentru a accesa administrarea"):
            st.session_state.admin_clicked = True
            st.rerun()
        
        # Ascunde butonul vizual
        st.markdown("""
        <style>
            div[data-testid="stButton"] button[kind="secondary"] {
                display: none;
            }
        </style>
        """, unsafe_allow_html=True)
        
        # JavaScript pentru a face cuv√¢ntul "Profesional" clickable
        st.markdown("""
        <script>
        document.addEventListener('DOMContentLoaded', function() {
            const adminElement = document.querySelector('.admin-clickable');
            if (adminElement) {
                adminElement.addEventListener('click', function() {
                    // GƒÉse»ôte »ôi apasƒÉ butonul Streamlit ascuns
                    const buttons = document.querySelectorAll('button');
                    buttons.forEach(button => {
                        if (button.textContent === 'Acces Administrare') {
                            button.click();
                        }
                    });
                });
            }
        });
        </script>
        """, unsafe_allow_html=True)
        
        # VerificƒÉ dacƒÉ butonul de administrare a fost apƒÉsat
        if 'admin_clicked' not in st.session_state:
            st.session_state.admin_clicked = False
        
        # Meniu condi»õionat
        if st.session_state.admin_clicked:
            menu = st.radio("Alege sec»õiunea:", [
                "üìù ComandƒÉ Rendering", 
                "‚öôÔ∏è Administrare",
                "üí∞ Pre»õuri & Termene",
                "üìû Contact",
                "üîî NotificƒÉri",
                "üìä Tracking Progres"
            ])
        else:
            menu = st.radio("Alege sec»õiunea:", [
                "üìù ComandƒÉ Rendering", 
                "üí∞ Pre»õuri & Termene",
                "üìû Contact",
                "üîî NotificƒÉri",
                "üìä Tracking Progres"
            ])
        
        st.markdown("---")
        st.markdown("**üìû Contact rapid:**")
        st.markdown("üìß bostiogstefania@gmail.com")
        st.markdown("üì± +40 724 911 299")
    
    # Restul codului rƒÉm√¢ne la fel ca √Æn versiunea anterioarƒÉ...
    # [Aici ar trebui sƒÉ fie restul codului pentru toate sec»õiunile]
    # Pentru spa»õiu, voi include doar sec»õiunea de administrare ca exemplu

    # Sec»õiunea de comandƒÉ nouƒÉ
    if menu == "üìù ComandƒÉ Rendering":
        st.header("üé® ComandƒÉ Rendering NouƒÉ")
        st.info("Aceasta este sec»õiunea pentru comenzi noi. Func»õionalitatea completƒÉ este implementatƒÉ √Æn codul anterior.")

    # Sec»õiunea pre»õuri
    elif menu == "üí∞ Pre»õuri & Termene":
        st.header("üí∞ Pre»õuri & Termene de Livrare")
        st.info("Aceasta este sec»õiunea pentru pre»õuri. Func»õionalitatea completƒÉ este implementatƒÉ √Æn codul anterior.")

    # Sec»õiunea notificƒÉri
    elif menu == "üîî NotificƒÉri":
        st.header("üîî NotificƒÉri »ôi AlertƒÉ")
        st.info("Aceasta este sec»õiunea pentru notificƒÉri. Func»õionalitatea completƒÉ este implementatƒÉ √Æn codul anterior.")

    # Sec»õiunea tracking progres
    elif menu == "üìä Tracking Progres":
        st.header("üìä Tracking Progres Rendering")
        st.info("Aceasta este sec»õiunea pentru tracking progres. Func»õionalitatea completƒÉ este implementatƒÉ √Æn codul anterior.")

    # Sec»õiunea de administrare
    elif menu == "‚öôÔ∏è Administrare":
        st.header("‚öôÔ∏è Administrare Comenzi")
        
        # Verificare parolƒÉ
        try:
            correct_password = st.secrets["ADMIN_PASSWORD"]
        except:
            correct_password = os.getenv('ADMIN_PASSWORD', 'Admin123!')
        
        admin_password = st.text_input("ParolƒÉ administrare:", type="password")
        
        if admin_password == correct_password:
            st.success("‚úÖ Acces administrativ acordat")
            
            # Submeniu √Æn administrare
            admin_menu = st.radio("Alege sec»õiunea:", 
                                ["üìä Dashboard Comenzi", "üéØ Gestionare Comenzi", "üìà Statistici", "üóëÔ∏è Comenzi »òterse", "üöÄ Management Progres"],
                                horizontal=True)
            
            if admin_menu == "üìä Dashboard Comenzi":
                st.subheader("üìä Dashboard Comenzi")
                orders_df = service.get_orders()
                if not orders_df.empty:
                    st.write(f"Total comenzi: {len(orders_df)}")
                    st.write(f"Venit total: {orders_df['price_euro'].sum()} EUR")
                else:
                    st.info("üì≠ Nu existƒÉ comenzi √Æn sistem.")
            
            elif admin_menu == "üéØ Gestionare Comenzi":
                st.subheader("üéØ Gestionare Comenzi")
                st.info("Interfa»õƒÉ pentru gestionarea comenzilor")
            
            elif admin_menu == "üìà Statistici":
                st.subheader("üìà Statistici Avansate")
                st.info("Statistici detaliate despre comenzi")
            
            elif admin_menu == "üóëÔ∏è Comenzi »òterse":
                st.subheader("üóëÔ∏è Comenzi »òterse")
                st.info("Gestionarea comenzilor »ôterse")
            
            elif admin_menu == "üöÄ Management Progres":
                st.subheader("üöÄ Management Progres Rendering")
                st.info("Managementul progresului comenzilor")
        
        elif admin_password and admin_password != correct_password:
            st.error("‚ùå ParolƒÉ incorectƒÉ!")
    
    # Sec»õiunea contact
    else:
        st.header("üìû Contact")
        st.info("Aceasta este sec»õiunea de contact. Func»õionalitatea completƒÉ este implementatƒÉ √Æn codul anterior.")

if __name__ == "__main__":
    main()
