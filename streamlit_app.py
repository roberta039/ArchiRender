import streamlit as st
import pandas as pd
import numpy as np
import requests
import smtplib
import os
import json
from datetime import datetime, timedelta
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import sqlite3
from sqlite3 import Error
import time
from dotenv import load_dotenv
import threading
from queue import Queue

# √éncarcƒÉ variabilele de mediu
load_dotenv()

# Configurare paginƒÉ
st.set_page_config(
    page_title="Rendering Service ARH",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Stiluri CSS personalizate
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .status-pending { background-color: #fff3cd; padding: 10px; border-radius: 5px; }
    .status-processing { background-color: #cce5ff; padding: 10px; border-radius: 5px; }
    .status-completed { background-color: #d4edda; padding: 10px; border-radius: 5px; }
    .urgent { border-left: 5px solid #dc3545; padding-left: 10px; }
    .deleted { background-color: #f8d7da; padding: 10px; border-radius: 5px; text-decoration: line-through; }
    .progress-bar { background-color: #f0f0f0; border-radius: 10px; margin: 10px 0; }
    .progress-fill { background-color: #28a745; height: 20px; border-radius: 10px; text-align: center; color: white; font-weight: bold; }
    .notification { background-color: #e7f3ff; padding: 15px; border-radius: 10px; border-left: 5px solid #1f77b4; margin: 10px 0; }
    .notification-success { background-color: #d4edda; border-left: 5px solid #28a745; }
    .notification-warning { background-color: #fff3cd; border-left: 5px solid #ffc107; }
    .notification-error { background-color: #f8d7da; border-left: 5px solid #dc3545; }
    .admin-hidden {
        background: transparent;
        border: none;
        color: #1f77b4;
        cursor: pointer;
        text-decoration: none;
        font-weight: bold;
    }
    .admin-hidden:hover {
        text-decoration: underline;
    }
</style>
""", unsafe_allow_html=True)

class NotificationService:
    def __init__(self):
        self.notification_queue = Queue()
    
    def add_notification(self, order_id, message, type="info", recipient_email=None):
        """AdaugƒÉ o notificare √Æn coadƒÉ"""
        notification = {
            'order_id': order_id,
            'message': message,
            'type': type,
            'recipient_email': recipient_email,
            'timestamp': datetime.now(),
            'read': False
        }
        self.notification_queue.put(notification)
        self.save_notification_to_db(notification)
    
    def save_notification_to_db(self, notification):
        """SalveazƒÉ notificarea √Æn baza de date"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO notifications 
                (order_id, message, type, recipient_email, timestamp, read)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                notification['order_id'],
                notification['message'],
                notification['type'],
                notification['recipient_email'],
                notification['timestamp'],
                notification['read']
            ))
            
            conn.commit()
            conn.close()
        except Error as e:
            print(f"Eroare la salvarea notificƒÉrii: {e}")
    
    def get_notifications(self, order_id=None, unread_only=False):
        """ReturneazƒÉ notificƒÉrile"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            
            if order_id:
                if unread_only:
                    df = pd.read_sql_query(
                        "SELECT * FROM notifications WHERE order_id = ? AND read = 0 ORDER BY timestamp DESC", 
                        conn, params=[order_id]
                    )
                else:
                    df = pd.read_sql_query(
                        "SELECT * FROM notifications WHERE order_id = ? ORDER BY timestamp DESC", 
                        conn, params=[order_id]
                    )
            else:
                if unread_only:
                    df = pd.read_sql_query(
                        "SELECT * FROM notifications WHERE read = 0 ORDER BY timestamp DESC", 
                        conn
                    )
                else:
                    df = pd.read_sql_query(
                        "SELECT * FROM notifications ORDER BY timestamp DESC", 
                        conn
                    )
            
            conn.close()
            return df
        except Error as e:
            print(f"Eroare la citirea notificƒÉrilor: {e}")
            return pd.DataFrame()
    
    def mark_as_read(self, notification_id):
        """MarcheazƒÉ o notificare ca cititƒÉ"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('UPDATE notifications SET read = 1 WHERE id = ?', (notification_id,))
            
            conn.commit()
            conn.close()
            return True
        except Error as e:
            print(f"Eroare la marcarea notificƒÉrii ca cititƒÉ: {e}")
            return False

class RenderingService:
    def __init__(self):
        self.init_database()
        self.notification_service = NotificationService()
    
    def init_database(self):
        """InitializeazƒÉ baza de date SQLite"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            # Tabela pentru comenzi
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    student_name TEXT NOT NULL,
                    email TEXT NOT NULL,
                    project_file TEXT,
                    project_link TEXT,
                    software TEXT NOT NULL,
                    resolution TEXT NOT NULL,
                    render_count INTEGER NOT NULL,
                    deadline TEXT,
                    requirements TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    completed_at TIMESTAMP,
                    download_link TEXT,
                    price_euro REAL NOT NULL,
                    payment_status TEXT DEFAULT 'pending',
                    payment_date TIMESTAMP,
                    receipt_sent BOOLEAN DEFAULT FALSE,
                    estimated_days INTEGER NOT NULL,
                    is_urgent BOOLEAN DEFAULT FALSE,
                    contact_phone TEXT,
                    faculty TEXT,
                    is_deleted BOOLEAN DEFAULT FALSE,
                    deleted_at TIMESTAMP,
                    deletion_reason TEXT,
                    progress INTEGER DEFAULT 0,
                    current_stage TEXT DEFAULT '√én a»ôteptare',
                    stages_completed INTEGER DEFAULT 0,
                    total_stages INTEGER DEFAULT 6,
                    progress_email_sent BOOLEAN DEFAULT FALSE,
                    completed_email_sent BOOLEAN DEFAULT FALSE,
                    status_email_sent BOOLEAN DEFAULT FALSE
                )
            ''')
            
            # Tabela pentru notificƒÉri
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS notifications (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER NOT NULL,
                    message TEXT NOT NULL,
                    type TEXT DEFAULT 'info',
                    recipient_email TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    read BOOLEAN DEFAULT FALSE,
                    FOREIGN KEY (order_id) REFERENCES orders (id)
                )
            ''')
            
            # Tabela pentru istoricul progresului
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS progress_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER NOT NULL,
                    stage TEXT NOT NULL,
                    progress INTEGER NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    notes TEXT,
                    FOREIGN KEY (order_id) REFERENCES orders (id)
                )
            ''')
            
            conn.commit()
            conn.close()
        except Error as e:
            st.error(f"‚ùå Eroare la initializarea bazei de date: {e}")
    
    def calculate_price_and_days(self, resolution, render_count, is_urgent=False):
        """CalculeazƒÉ pre»õul »ôi timpul de livrare"""
        # Pre»õuri dupƒÉ rezolu»õie
        price_map = {
            "2-4K": 70,
            "4-6K": 100, 
            "8K+": 120
        }
        
        # Zile de livrare dupƒÉ numƒÉrul de randƒÉri
        days_map = {
            1: 3, 2: 3, 3: 3,
            4: 6, 5: 6, 6: 6, 7: 6,
            8: 9, 9: 9, 10: 9,
            11: 12, 12: 12, 13: 12,
            14: 15, 15: 15
        }
        
        # Calcul zile (din 3 √Æn 3 peste 15)
        if render_count > 15:
            estimated_days = ((render_count - 1) // 3) * 3 + 3
        else:
            estimated_days = days_map.get(render_count, 3)
        
        # Ajustare pentru urgent
        if is_urgent:
            estimated_days = max(1, estimated_days // 2)  # Reduce timpul la jumƒÉtate
            urgent_surcharge = 0.5  # +50% pentru urgent
        else:
            urgent_surcharge = 0
        
        base_price = price_map.get(resolution, 70)
        final_price = base_price * (1 + urgent_surcharge)
        
        return round(final_price), estimated_days
    
    def add_order(self, order_data):
        """AdaugƒÉ o comandƒÉ nouƒÉ √Æn baza de date"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO orders 
                (student_name, email, project_file, project_link, software, resolution, 
                 render_count, deadline, requirements, price_euro, estimated_days,
                 is_urgent, contact_phone, faculty, total_stages)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                order_data['student_name'],
                order_data['email'],
                order_data.get('project_file'),
                order_data.get('project_link'),
                order_data['software'],
                order_data['resolution'],
                order_data['render_count'],
                order_data['deadline'],
                order_data['requirements'],
                order_data['price_euro'],
                order_data['estimated_days'],
                order_data.get('is_urgent', False),
                order_data.get('contact_phone', ''),
                order_data.get('faculty', ''),
                6  # total_stages
            ))
            
            order_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            # AdaugƒÉ notificare pentru noua comandƒÉ
            self.notification_service.add_notification(
                order_id,
                f"üéâ Comanda #{order_id} a fost plasatƒÉ cu succes! Timp de procesare estimat: {order_data['estimated_days']} zile.",
                "success",
                order_data['email']
            )
            
            # Trimite email cu chitan»õƒÉ
            self.send_receipt_email(order_data, order_id)
            
            return order_id
        except Error as e:
            st.error(f"‚ùå Eroare la adƒÉugarea comenzii: {e}")
            return None
    
    def send_receipt_email(self, order_data, order_id):
        """Trimite email cu chitan»õƒÉ »ôi detalii comanda"""
        try:
            smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            smtp_port = int(os.getenv('SMTP_PORT', 587))
            email_from = os.getenv('EMAIL_FROM', '')
            email_password = os.getenv('EMAIL_PASSWORD', '')
            
            if not all([smtp_server, email_from, email_password]):
                st.warning("""
                ‚ö†Ô∏è **Configura»õia email nu este completƒÉ.** 
                
                Pentru a activa notificƒÉrile email, adaugƒÉ urmƒÉtoarele variabile √Æn fi»ôierul `.env`:
                ```
                SMTP_SERVER=smtp.gmail.com
                SMTP_PORT=587
                EMAIL_FROM=emailul.tau@gmail.com
                EMAIL_PASSWORD=parola_ta_de_aplicatie
                ```
                """)
                return
            
            # Email cƒÉtre client
            msg_client = MIMEMultipart()
            msg_client.attach(MIMEText(f"""
            üßæ CHI»öAN»öƒÇ PLATƒÇ RENDERING SERVICE

            Mul»õumim pentru comanda ta, {order_data['student_name']}!
            
            üìã DETALII COMANDA:
            ‚Ä¢ ID ComandƒÉ: #{order_id}
            ‚Ä¢ Data: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            ‚Ä¢ SumƒÉ plƒÉtitƒÉ: {order_data['price_euro']} EUR
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ NumƒÉr randƒÉri: {order_data['render_count']}
            ‚Ä¢ Software: {order_data['software']}
            
            üí≥ DETALII PLATƒÇ:
            ‚Ä¢ Revolut: https://revolut.me/stefanxuhy
            ‚Ä¢ Transfer Bancar:
              - Beneficiar: STEFANIA BOSTIOG
              - IBAN: RO60 BREL 0002 0036 6187 0100
              - BancƒÉ: Libra Bank
              - SumƒÉ: {order_data['price_euro']} EUR
            
            ‚è∞ DETALII LIVRARE:
            ‚Ä¢ Timp estimat: {order_data['estimated_days']} zile lucrƒÉtoare
            ‚Ä¢ Data estimatƒÉ livrare: {(datetime.now() + timedelta(days=order_data['estimated_days'])).strftime('%d.%m.%Y')}
            ‚Ä¢ Status: ‚è≥ √én a»ôteptare procesare
            
            üîî NOTIFICƒÇRI:
            ‚Ä¢ Vei primi o notificare c√¢nd √Æncepe procesarea
            ‚Ä¢ Vei primi o notificare c√¢nd rendering-ul este gata
            ‚Ä¢ Link download va fi trimis la finalizare
            
            üìã SPECIFICA»öII:
            {order_data['requirements'] or 'Niciune specificate'}
            
            üìû SUPPORT:
            ‚Ä¢ Email: bostiogstefania@gmail.com
            ‚Ä¢ Telefon: +40 724 911 299
            
            Mul»õumim pentru √Æncredere!
            üèóÔ∏è Echipa Rendering Service ARH
            """, 'plain', 'utf-8'))
            
            msg_client['From'] = email_from
            msg_client['To'] = order_data['email']
            msg_client['Subject'] = f"üßæ Chitan»õƒÉ Rendering #{order_id} - {order_data['price_euro']} EUR"
            
            # Email cƒÉtre administrator
            msg_admin = MIMEMultipart()
            msg_admin.attach(MIMEText(f"""
            üí∞ COMANDA NOUƒÇ PLƒÇTITƒÇ!

            üìã DETALII CLIENT:
            ‚Ä¢ Nume: {order_data['student_name']}
            ‚Ä¢ Email: {order_data['email']}
            ‚Ä¢ Telefon: {order_data.get('contact_phone', 'Nespecificat')}
            ‚Ä¢ Facultate: {order_data.get('faculty', 'NespecificatƒÉ')}
            
            üí∂ DETALII FINANCIARE:
            ‚Ä¢ ID ComandƒÉ: #{order_id}
            ‚Ä¢ SumƒÉ: {order_data['price_euro']} EUR
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ RandƒÉri: {order_data['render_count']}
            ‚Ä¢ Zile estimare: {order_data['estimated_days']}
            ‚Ä¢ Urgent: {'DA' if order_data.get('is_urgent') else 'NU'}
            
            üõ†Ô∏è DETALII PROIECT:
            ‚Ä¢ Software: {order_data['software']}
            ‚Ä¢ Cerin»õe: {order_data['requirements'] or 'Niciune'}
            ‚Ä¢ Fi»ôier: {'√éncƒÉrcat' if order_data.get('project_file') else 'Link: ' + order_data.get('project_link', 'N/A')}
            
            ‚ö° AC»öIUNE NECESARƒÇ:
            1. VerificƒÉ fi»ôierul/link-ul proiectului
            2. ConfirmƒÉ clientului primirea
            3. √éncepe procesarea
            
            ‚è∞ Termen limitƒÉ: {(datetime.now() + timedelta(days=order_data['estimated_days'])).strftime('%d.%m.%Y')}
            """, 'plain', 'utf-8'))
            
            msg_admin['From'] = email_from
            msg_admin['To'] = "bostiogstefania@gmail.com"
            msg_admin['Subject'] = f"üí∞ COMANDA NOUƒÇ #{order_id} - {order_data['price_euro']} EUR"
            
            # Trimite ambele email-uri
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.send_message(msg_client)
            server.send_message(msg_admin)
            server.quit()
            
            # MarcheazƒÉ chitan»õa trimisƒÉ
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE orders SET receipt_sent = 1 WHERE id = ?', (order_id,))
            conn.commit()
            conn.close()
            
            st.success("üìß Chitan»õƒÉ trimisƒÉ pe email!")
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Emailurile nu au putut fi trimise: {e}")

    def send_status_email(self, order_data, old_status, new_status):
        """Trimite email cu notificare schimbare status"""
        try:
            smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            smtp_port = int(os.getenv('SMTP_PORT', 587))
            email_from = os.getenv('EMAIL_FROM', '')
            email_password = os.getenv('EMAIL_PASSWORD', '')
            
            if not all([smtp_server, email_from, email_password]):
                return False
            
            status_messages = {
                'pending': '‚è≥ √én a»ôteptare procesare',
                'processing': 'üöÄ Procesare √Æn curs', 
                'completed': '‚úÖ Finalizat'
            }
            
            msg = MIMEMultipart()
            msg.attach(MIMEText(f"""
            üîî ACTUALIZARE STATUS - Rendering #{order_data['id']}

            BunƒÉ {order_data['student_name']},
            
            Statusul comenzii tale s-a actualizat!
            
            üìä **STATUS NOU:**
            ‚Ä¢ De la: {status_messages.get(old_status, old_status)}
            ‚Ä¢ La: {status_messages.get(new_status, new_status)}
            
            üéØ **DETALII COMANDA:**
            ‚Ä¢ ID ComandƒÉ: #{order_data['id']}
            ‚Ä¢ Software: {order_data['software']}
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ NumƒÉr randƒÉri: {order_data['render_count']}
            ‚Ä¢ Progres curent: {order_data['progress']}%
            
            ‚è∞ **TERMEN ESTIMAT:**
            Data estimatƒÉ de finalizare: {order_data['deadline']}
            
            {'üì• **DESCƒÇRCARE:**' + chr(10) + 'Proiectul tƒÉu este gata! Po»õi descƒÉrca fi»ôierele de aici:' + chr(10) + order_data['download_link'] if new_status == 'completed' and order_data.get('download_link') else ''}
            
            üìû **SUPPORT:**
            ‚Ä¢ Email: bostiogstefania@gmail.com
            ‚Ä¢ Telefon: +40 724 911 299
            
            Mul»õumim pentru √Æncredere!
            üèóÔ∏è Echipa Rendering Service ARH
            """, 'plain', 'utf-8'))
            
            msg['From'] = email_from
            msg['To'] = order_data['email']
            msg['Subject'] = f"üîî Status Actualizat - Rendering #{order_data['id']} - {status_messages.get(new_status, new_status)}"
            
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.send_message(msg)
            server.quit()
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Eroare la trimiterea email-ului de status: {e}")
            return False

    def send_progress_email(self, order_data, progress, current_stage, notes=""):
        """Trimite email cu notificare progres cƒÉtre client"""
        try:
            smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            smtp_port = int(os.getenv('SMTP_PORT', 587))
            email_from = os.getenv('EMAIL_FROM', '')
            email_password = os.getenv('EMAIL_PASSWORD', '')
            
            if not all([smtp_server, email_from, email_password]):
                return False
            
            msg = MIMEMultipart()
            msg.attach(MIMEText(f"""
            üöÄ PROCESARE √éN CURS - Rendering #{order_data['id']}

            BunƒÉ {order_data['student_name']},
            
            Procesarea rendering-ului tƒÉu a √Ænceput!
            
            üìä **STADIUL ACTUAL:**
            ‚Ä¢ Progres: {progress}%
            ‚Ä¢ EtapƒÉ: {current_stage}
            ‚Ä¢ Status: Procesare √Æn curs
            
            üéØ **DETALII COMANDA:**
            ‚Ä¢ ID ComandƒÉ: #{order_data['id']}
            ‚Ä¢ Software: {order_data['software']}
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ NumƒÉr randƒÉri: {order_data['render_count']}
            
            ‚è∞ **TERMEN ESTIMAT:**
            Data estimatƒÉ de finalizare: {order_data['deadline']}
            
            üìù **DETALII PROIECT:**
            {notes or 'Procesare √Æn conformitate cu specifica»õiile tale'}
            
            üîî **URMƒÇTOAREA NOTIFICARE:**
            Vei primi un email c√¢nd rendering-ul va fi complet finalizat »ôi gata pentru descƒÉrcare.
            
            üìû **SUPPORT:**
            ‚Ä¢ Email: bostiogstefania@gmail.com
            ‚Ä¢ Telefon: +40 724 911 299
            
            Mul»õumim pentru √Æncredere!
            üèóÔ∏è Echipa Rendering Service ARH
            """, 'plain', 'utf-8'))
            
            msg['From'] = email_from
            msg['To'] = order_data['email']
            msg['Subject'] = f"üöÄ Procesare Rendering #{order_data['id']} - √én curs"
            
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.send_message(msg)
            server.quit()
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Eroare la trimiterea email-ului de progres: {e}")
            return False

    def send_completion_email(self, order_data, download_link=None):
        """Trimite email cu notificare finalizare cƒÉtre client"""
        try:
            smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            smtp_port = int(os.getenv('SMTP_PORT', 587))
            email_from = os.getenv('EMAIL_FROM', '')
            email_password = os.getenv('EMAIL_PASSWORD', '')
            
            if not all([smtp_server, email_from, email_password]):
                return False
            
            download_section = ""
            if download_link:
                download_section = f"""
                üì• **DESCƒÇRCARE:**
                Proiectul tƒÉu este gata! Po»õi descƒÉrca fi»ôierele de aici:
                {download_link}
                """
            else:
                download_section = """
                üì• **DESCƒÇRCARE:**
                Proiectul tƒÉu este gata! Vei primi link-ul de descƒÉrcare √Æn scurt timp.
                """
            
            msg = MIMEMultipart()
            msg.attach(MIMEText(f"""
            ‚úÖ RENDERING FINALIZAT - #{order_data['id']}

            BunƒÉ {order_data['student_name']},
            
            Rendering-ul tƒÉu este finalizat »ôi gata!
            
            üéâ **PROIECT FINALIZAT:**
            ‚Ä¢ Status: 100% Complet
            ‚Ä¢ Data finalizare: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            ‚Ä¢ Calitate: Conform specifica»õiilor
            
            üéØ **DETALII COMANDA:**
            ‚Ä¢ ID ComandƒÉ: #{order_data['id']}
            ‚Ä¢ Software: {order_data['software']}
            ‚Ä¢ Rezolu»õie: {order_data['resolution']}
            ‚Ä¢ NumƒÉr randƒÉri: {order_data['render_count']}
            
            {download_section}
            
            üìã **SPECIFICA»öII PROCESATE:**
            {order_data['requirements'] or 'Toate specifica»õiile au fost respectate'}
            
            ‚≠ê **FEEDBACK:**
            DacƒÉ e»ôti mul»õumit de rezultat, te rugƒÉm sƒÉ ne la»ôi un review!
            
            üìû **SUPPORT:**
            ‚Ä¢ Email: bostiogstefania@gmail.com
            ‚Ä¢ Telefon: +40 724 911 299
            
            Mul»õumim cƒÉ ai ales serviciile noastre!
            üèóÔ∏è Echipa Rendering Service ARH
            """, 'plain', 'utf-8'))
            
            msg['From'] = email_from
            msg['To'] = order_data['email']
            msg['Subject'] = f"‚úÖ Rendering Finalizat #{order_data['id']} - Gata pentru descƒÉrcare"
            
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.send_message(msg)
            server.quit()
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Eroare la trimiterea email-ului de finalizare: {e}")
            return False
    
    def get_orders(self, status=None, include_deleted=False):
        """ReturneazƒÉ toate comenzile"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            
            if status:
                if include_deleted:
                    df = pd.read_sql_query(
                        "SELECT * FROM orders WHERE status = ? ORDER BY created_at DESC", 
                        conn, params=[status]
                    )
                else:
                    df = pd.read_sql_query(
                        "SELECT * FROM orders WHERE status = ? AND is_deleted = 0 ORDER BY created_at DESC", 
                        conn, params=[status]
                    )
            else:
                if include_deleted:
                    df = pd.read_sql_query(
                        "SELECT * FROM orders ORDER BY created_at DESC", 
                        conn
                    )
                else:
                    df = pd.read_sql_query(
                        "SELECT * FROM orders WHERE is_deleted = 0 ORDER BY created_at DESC", 
                        conn
                    )
            
            conn.close()
            return df
        except Error as e:
            st.error(f"‚ùå Eroare la citirea comenzilor: {e}")
            return pd.DataFrame()
    
    def update_order_status(self, order_id, status, download_link=None):
        """ActualizeazƒÉ statusul unei comenzi »ôi trimite notificƒÉri"""
        try:
            # Ob»õine starea anterioarƒÉ
            order = self.get_order_by_id(order_id)
            if order.empty:
                return False
                
            old_status = order.iloc[0]['status']
            order_data = order.iloc[0]
            
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            if download_link:
                cursor.execute('''
                    UPDATE orders 
                    SET status = ?, completed_at = CURRENT_TIMESTAMP, download_link = ?
                    WHERE id = ?
                ''', (status, download_link, order_id))
            else:
                cursor.execute('''
                    UPDATE orders 
                    SET status = ? 
                    WHERE id = ?
                ''', (status, order_id))
            
            conn.commit()
            conn.close()
            
            # AdaugƒÉ notificare pentru schimbarea statusului
            self.notification_service.add_notification(
                order_id,
                f"üìä Status comanda actualizat: {old_status.upper()} ‚Üí {status.upper()}",
                "info",
                order_data['email']
            )
            
            # Trimite email de notificare status DOAR dacƒÉ statusul s-a schimbat
            if old_status != status:
                # VerificƒÉ dacƒÉ email-ul de status a fost deja trimis pentru aceastƒÉ schimbare
                if not order_data.get('status_email_sent', False) or True:  # For»õeazƒÉ trimiterea pentru testare
                    email_sent = self.send_status_email(order_data, old_status, status)
                    
                    # MarcheazƒÉ cƒÉ email-ul de status a fost trimis
                    if email_sent:
                        conn = sqlite3.connect('rendering_orders.db')
                        cursor = conn.cursor()
                        cursor.execute('UPDATE orders SET status_email_sent = 1 WHERE id = ?', (order_id,))
                        conn.commit()
                        conn.close()
            
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la actualizarea comenzii: {e}")
            return False

    def update_progress(self, order_id, progress, current_stage, notes=""):
        """ActualizeazƒÉ progresul unei comenzi »ôi trimite notificƒÉri"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            # Ob»õine starea anterioarƒÉ pentru a verifica dacƒÉ trebuie sƒÉ trimitem email
            order = self.get_order_by_id(order_id)
            if order.empty:
                return False
                
            previous_progress = order.iloc[0]['progress']
            progress_email_sent = order.iloc[0]['progress_email_sent']
            completed_email_sent = order.iloc[0]['completed_email_sent']
            
            # CalculeazƒÉ numƒÉrul de etape completate
            stages_completed = int((progress / 100) * 6)  # 6 etape totale
            
            cursor.execute('''
                UPDATE orders 
                SET progress = ?, current_stage = ?, stages_completed = ?
                WHERE id = ?
            ''', (progress, current_stage, stages_completed, order_id))
            
            # SalveazƒÉ √Æn istoricul progresului
            cursor.execute('''
                INSERT INTO progress_history (order_id, stage, progress, notes)
                VALUES (?, ?, ?, ?)
            ''', (order_id, current_stage, progress, notes))
            
            conn.commit()
            conn.close()
            
            # Ob»õine datele complete ale comenzii pentru email
            order = self.get_order_by_id(order_id)
            if not order.empty:
                order_data = order.iloc[0]
                
                # AdaugƒÉ notificare pentru progres
                self.notification_service.add_notification(
                    order_id,
                    f"üìà Progres actualizat: {progress}% - {current_stage}",
                    "info",
                    order_data['email']
                )
                
                # NOTIFICARE 1: Procesare √ÆnceputƒÉ (doar o datƒÉ)
                if progress >= 10 and not progress_email_sent and previous_progress < 10:
                    success = self.send_progress_email(order_data, progress, current_stage, notes)
                    if success:
                        # MarcheazƒÉ cƒÉ email-ul de progres a fost trimis
                        conn = sqlite3.connect('rendering_orders.db')
                        cursor = conn.cursor()
                        cursor.execute('UPDATE orders SET progress_email_sent = 1 WHERE id = ?', (order_id,))
                        conn.commit()
                        conn.close()
                        print(f"‚úÖ Email progres trimis pentru comanda #{order_id}")
                
                # NOTIFICARE 2: Finalizare (doar o datƒÉ)
                if progress == 100 and not completed_email_sent:
                    download_link = order_data['download_link']
                    success = self.send_completion_email(order_data, download_link)
                    if success:
                        # MarcheazƒÉ cƒÉ email-ul de finalizare a fost trimis
                        conn = sqlite3.connect('rendering_orders.db')
                        cursor = conn.cursor()
                        cursor.execute('UPDATE orders SET completed_email_sent = 1 WHERE id = ?', (order_id,))
                        conn.commit()
                        conn.close()
                        print(f"‚úÖ Email finalizare trimis pentru comanda #{order_id}")
            
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la actualizarea progresului: {e}")
            return False

    def get_order_by_id(self, order_id):
        """ReturneazƒÉ o comandƒÉ dupƒÉ ID"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            df = pd.read_sql_query(
                "SELECT * FROM orders WHERE id = ?", 
                conn, params=[order_id]
            )
            conn.close()
            return df
        except Error as e:
            st.error(f"‚ùå Eroare la citirea comenzii: {e}")
            return pd.DataFrame()

    def get_progress_history(self, order_id):
        """ReturneazƒÉ istoricul progresului pentru o comandƒÉ"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            df = pd.read_sql_query(
                "SELECT * FROM progress_history WHERE order_id = ? ORDER BY timestamp DESC", 
                conn, params=[order_id]
            )
            conn.close()
            return df
        except Error as e:
            st.error(f"‚ùå Eroare la citirea istoricului: {e}")
            return pd.DataFrame()

    def delete_order(self, order_id, reason=""):
        """MarcheazƒÉ o comandƒÉ ca »ôtearsƒÉ"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE orders 
                SET is_deleted = 1, deleted_at = CURRENT_TIMESTAMP, deletion_reason = ?
                WHERE id = ?
            ''', (reason, order_id))
            
            conn.commit()
            conn.close()
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la »ôtergerea comenzii: {e}")
            return False

    def restore_order(self, order_id):
        """Restabile»ôte o comandƒÉ »ôtearsƒÉ"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE orders 
                SET is_deleted = 0, deleted_at = NULL, deletion_reason = NULL
                WHERE id = ?
            ''', (order_id,))
            
            conn.commit()
            conn.close()
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la restabilirea comenzii: {e}")
            return False

    def permanently_delete_order(self, order_id):
        """»òterge definitiv o comandƒÉ din baza de date"""
        try:
            conn = sqlite3.connect('rendering_orders.db')
            cursor = conn.cursor()
            
            cursor.execute('DELETE FROM orders WHERE id = ?', (order_id,))
            
            conn.commit()
            conn.close()
            return True
        except Error as e:
            st.error(f"‚ùå Eroare la »ôtergerea definitivƒÉ a comenzii: {e}")
            return False

def display_progress_bar(progress, current_stage):
    """Afi»ôeazƒÉ o barƒÉ de progres"""
    st.markdown(f"""
    <div class="progress-bar">
        <div class="progress-fill" style="width: {progress}%">
            {progress}% - {current_stage}
        </div>
    </div>
    """, unsafe_allow_html=True)

def display_notification(message, type="info"):
    """Afi»ôeazƒÉ o notificare"""
    css_class = {
        "info": "notification",
        "success": "notification-success", 
        "warning": "notification-warning",
        "error": "notification-error"
    }.get(type, "notification")
    
    st.markdown(f"""
    <div class="{css_class}">
        {message}
    </div>
    """, unsafe_allow_html=True)

def main():
    st.markdown('<h1 class="main-header">üèóÔ∏è Rendering Service ARH</h1>', unsafe_allow_html=True)
    st.markdown("### Serviciu profesional de rendering pentru studen»õii la arhitecturƒÉ")
    
    # Ini»õializeazƒÉ serviciul
    service = RenderingService()
    
    # Sidebar pentru navigare
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center;">
            <h1>üèóÔ∏è</h1>
            <h3>Rendering Service</h3>
            <p><em>
                <button class="admin-hidden" onclick="this.parentNode.querySelector('input').value='admin'">Profesional</button> ‚Ä¢ Rapid ‚Ä¢ Calitate
            </em></p>
            <input type="text" style="display: none;">
        </div>
        """, unsafe_allow_html=True)
        
        # VerificƒÉ dacƒÉ butonul de administrare a fost apƒÉsat
        if st.session_state.get('admin_clicked'):
            menu = st.radio("Alege sec»õiunea:", [
                "üìù ComandƒÉ Rendering", 
                "‚öôÔ∏è Administrare",
                "üí∞ Pre»õuri & Termene",
                "üìû Contact",
                "üîî NotificƒÉri",
                "üìä Tracking Progres"
            ])
        else:
            menu = st.radio("Alege sec»õiunea:", [
                "üìù ComandƒÉ Rendering", 
                "üí∞ Pre»õuri & Termene",
                "üìû Contact",
                "üîî NotificƒÉri",
                "üìä Tracking Progres"
            ])
        
        st.markdown("---")
        st.markdown("**üìû Contact rapid:**")
        st.markdown("üìß bostiogstefania@gmail.com")
        st.markdown("üì± +40 724 911 299")
        
        # JavaScript pentru a detecta click-ul pe butonul ascuns
        st.markdown("""
        <script>
        document.addEventListener('DOMContentLoaded', function() {
            const adminButton = document.querySelector('.admin-hidden');
            if (adminButton) {
                adminButton.addEventListener('click', function() {
                    // Trimite o cerere cƒÉtre Streamlit pentru a seta session state
                    fetch('/streamlit', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            'admin_clicked': true
                        })
                    }).then(() => {
                        window.location.reload();
                    });
                });
            }
        });
        </script>
        """, unsafe_allow_html=True)
    
    # Sec»õiunea de comandƒÉ nouƒÉ
    if menu == "üìù ComandƒÉ Rendering":
        st.header("üé® ComandƒÉ Rendering NouƒÉ")
        
        # Folosim session state pentru a gestiona starea formularului
        if 'order_submitted' not in st.session_state:
            st.session_state.order_submitted = False
        if 'form_data' not in st.session_state:
            st.session_state.form_data = {}
        if 'upload_option' not in st.session_state:
            st.session_state.upload_option = "üìé √éncarcƒÉ fi»ôier"
        
        if not st.session_state.order_submitted:
            # Folosim columns pentru a separa logica de afi»ôare
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üë§ Date Personale")
                student_name = st.text_input("Nume complet*")
                email = st.text_input("Email*")
                contact_phone = st.text_input("NumƒÉr de telefon*")
                faculty = st.text_input("Facultate/Universitate")
                
                st.subheader("üì§ √éncarcƒÉ Proiectul")
                
                # Radio button cu callback pentru a for»õa re-run
                upload_option = st.radio(
                    "Alege metoda de upload:", 
                    ["üìé √éncarcƒÉ fi»ôier", "üîó Link extern"],
                    index=0 if st.session_state.upload_option == "üìé √éncarcƒÉ fi»ôier" else 1,
                    key="upload_radio"
                )
                
                # ActualizeazƒÉ session state c√¢nd se schimbƒÉ op»õiunea
                if upload_option != st.session_state.upload_option:
                    st.session_state.upload_option = upload_option
                    st.rerun()
                
                # Afi»ôeazƒÉ c√¢mpul corespunzƒÉtor √Æn func»õie de selec»õie
                if st.session_state.upload_option == "üìé √éncarcƒÉ fi»ôier":
                    project_file = st.file_uploader(
                        "√éncarcƒÉ fi»ôierul proiectului", 
                        type=['skp', 'rvt', 'max', 'blend', 'dwg', 'zip', 'rar'],
                        help="SuportƒÉ: SketchUp, Revit, 3ds Max, Blender, etc."
                    )
                    project_link = None
                    st.info("üí° **Formate acceptate:** .skp, .rvt, .max, .blend, .dwg, .zip, .rar")
                else:
                    project_link = st.text_input(
                        "Link descƒÉrcare proiect*", 
                        placeholder="https://drive.google.com/... sau Wetransfer, Dropbox, etc.",
                        help="AdaugƒÉ un link de descƒÉrcare de pe Google Drive, WeTransfer, Dropbox etc."
                    )
                    project_file = None
                    st.info("üí° **Servicii acceptate:** Google Drive, WeTransfer, Dropbox, OneDrive, etc.")
            
            with col2:
                st.subheader("üéØ Specifica»õii Rendering")
                software = st.selectbox(
                    "Software utilizat*",
                    ["SketchUp", "Revit", "3ds Max", "Blender", "Archicad", "Lumion", "Altul"]
                )
                
                resolution = st.selectbox(
                    "Rezolu»õie rendering*",
                    ["2-4K", "4-6K", "8K+"]
                )
                
                render_count = st.slider("NumƒÉr de randƒÉri*", 1, 20, 1, 
                                       help="1-3 randƒÉri = 3 zile, 4-7 = 6 zile, 8-10 = 9 zile, etc.")
                
                is_urgent = st.checkbox("üöÄ ComandƒÉ urgentƒÉ (+50% cost)", 
                                      help="Timp de procesare redus la jumƒÉtate")
                
                requirements = st.text_area("Cerin»õe specifice rendering", 
                                          placeholder="Unghi camerƒÉ, iluminare, materiale, stil preferat, etc.",
                                          height=100)
            
            # Calcul pre»õ »ôi timp
            if resolution and render_count:
                price_euro, estimated_days = service.calculate_price_and_days(
                    resolution, render_count, is_urgent
                )
                
                delivery_date = datetime.now() + timedelta(days=estimated_days)
                
                st.markdown("---")
                st.markdown(
                    f"""
                    <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 4px solid #28a745; margin: 15px 0;">
                        <h3 style="color: #28a745;">üí∞ Total: {price_euro} EUR</h3>
                        <p><strong>‚è∞ Timp de livrare:</strong> {estimated_days} zile lucrƒÉtoare</p>
                        <p><strong>üìÖ Data estimatƒÉ:</strong> {delivery_date.strftime('%d %B %Y')}</p>
                        <p><strong>üéØ Rezolu»õie:</strong> {resolution}</p>
                        <p><strong>üñºÔ∏è RandƒÉri:</strong> {render_count}</p>
                        <p><strong>‚ö° Urgent:</strong> {'Da (+50%)' if is_urgent else 'Nu'}</p>
                    </div>
                    """, 
                    unsafe_allow_html=True
                )
            
            st.markdown("** * C√¢mpuri obligatorii*")
            
            # Buton de submit √Æn afara coloanelor
            submitted = st.button("üöÄ ContinuƒÉ la PlatƒÉ", type="primary", use_container_width=True)
            
            if submitted:
                if not all([student_name, email, contact_phone, software, resolution]):
                    st.error("‚ö†Ô∏è Te rog completeazƒÉ toate c√¢mpurile obligatorii!")
                elif st.session_state.upload_option == "üìé √éncarcƒÉ fi»ôier" and project_file is None:
                    st.error("‚ö†Ô∏è Te rog √ÆncarcƒÉ fi»ôierul proiectului!")
                elif st.session_state.upload_option == "üîó Link extern" and not project_link:
                    st.error("‚ö†Ô∏è Te rog adaugƒÉ link-ul de descƒÉrcare!")
                else:
                    # SalveazƒÉ datele √Æn session state
                    st.session_state.form_data = {
                        'student_name': student_name,
                        'email': email,
                        'contact_phone': contact_phone,
                        'faculty': faculty,
                        'project_file': project_file.name if project_file else None,
                        'project_link': project_link,
                        'software': software,
                        'resolution': resolution,
                        'render_count': render_count,
                        'is_urgent': is_urgent,
                        'requirements': requirements,
                        'price_euro': price_euro,
                        'estimated_days': estimated_days,
                        'delivery_date': delivery_date
                    }
                    st.session_state.order_submitted = True
                    st.rerun()
        
        else:
            # PAGINA DE PLATƒÇ (dupƒÉ submit formular)
            form_data = st.session_state.form_data
            
            st.markdown("### üí≥ FinalizeazƒÉ Comanda")
            st.markdown(f"#### Total de platƒÉ: {form_data['price_euro']} EUR")
            
            st.markdown("#### üìã Alege metoda de platƒÉ:")

            # Revolut Link
            st.markdown(
                f"""
                <div style="background-color: #0075eb; color: white; padding: 20px; border-radius: 10px; text-align: center; margin: 15px 0;">
                    <h3 style="color: white; margin-bottom: 15px;">üöÄ PlatƒÉ RapidƒÉ cu Revolut</h3>
                    <p style="font-size: 1.1em;"><strong>Click pe link pentru a plƒÉti:</strong></p>
                    <a href="https://revolut.me/stefanxuhy" target="_blank" style="color: white; text-decoration: none; font-size: 1.3em; font-weight: bold;">
                        https://revolut.me/stefanxuhy
                    </a>
                    <p style="margin-top: 10px;"><em>SumƒÉ: {form_data['price_euro']} EUR</em></p>
                </div>
                """, 
                unsafe_allow_html=True
            )

            # Bank Details
            st.markdown(
                f"""
                <div style="background-color: #f0f8ff; padding: 20px; border-radius: 10px; border-left: 4px solid #1f77b4; margin: 15px 0;">
                    <h3 style="color: #1f77b4; margin-bottom: 15px;">üè¶ Transfer Bancar</h3>
                    <p><strong>Beneficiar:</strong> STEFANIA BOSTIOG</p>
                    <p><strong>IBAN:</strong> RO60 BREL 0002 0036 6187 0100</p>
                    <p><strong>BancƒÉ:</strong> Libra Bank</p>
                    <p><strong>SumƒÉ:</strong> {form_data['price_euro']} EUR</p>
                    <p><strong>Descriere:</strong> Rendering #{form_data['student_name'][:10]}</p>
                </div>
                """, 
                unsafe_allow_html=True
            )
            
            # Afi»ôeazƒÉ detalii comanda
            st.subheader("üìã Detalii Comanda")
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**üë§ Nume:** {form_data['student_name']}")
                st.write(f"**üìß Email:** {form_data['email']}")
                st.write(f"**üì± Telefon:** {form_data['contact_phone']}")
                st.write(f"**üè´ Facultate:** {form_data['faculty']}")
            with col2:
                st.write(f"**üõ†Ô∏è Software:** {form_data['software']}")
                st.write(f"**üéØ Rezolu»õie:** {form_data['resolution']}")
                st.write(f"**üñºÔ∏è RandƒÉri:** {form_data['render_count']}")
                st.write(f"**‚ö° Urgent:** {'Da' if form_data['is_urgent'] else 'Nu'}")
            
            # Confirmare platƒÉ
            payment_confirmed = st.checkbox("‚úÖ Confirm cƒÉ am efectuat plata")
            
            col1, col2 = st.columns([1, 2])
            with col1:
                if st.button("üîÑ ModificƒÉ Comanda"):
                    st.session_state.order_submitted = False
                    st.rerun()
            
            with col2:
                if st.button("üì® FinalizeazƒÉ Comanda »ôi Prime»ôte Chitan»õa", type="primary"):
                    if not payment_confirmed:
                        st.error("‚ö†Ô∏è Te rog confirmƒÉ efectuarea plƒÉ»õii!")
                    else:
                        with st.spinner("Se proceseazƒÉ comanda »ôi se trimite chitan»õa..."):
                            order_data = {
                                'student_name': form_data['student_name'],
                                'email': form_data['email'],
                                'project_file': form_data['project_file'],
                                'project_link': form_data['project_link'],
                                'software': form_data['software'],
                                'resolution': form_data['resolution'],
                                'render_count': form_data['render_count'],
                                'deadline': form_data['delivery_date'].strftime("%Y-%m-%d"),
                                'requirements': form_data['requirements'],
                                'price_euro': form_data['price_euro'],
                                'estimated_days': form_data['estimated_days'],
                                'is_urgent': form_data['is_urgent'],
                                'contact_phone': form_data['contact_phone'],
                                'faculty': form_data['faculty']
                            }
                            
                            order_id = service.add_order(order_data)
                            if order_id:
                                st.success(f"üéâ Comanda #{order_id} a fost finalizatƒÉ cu succes!")
                                st.balloons()
                                
                                # Afi»ôeazƒÉ countdown
                                st.markdown(
                                    f"""
                                    <div style="background-color: #fff3cd; padding: 20px; border-radius: 10px; text-align: center; margin: 15px 0;">
                                        <h3>‚è≥ Timp rƒÉmas p√¢nƒÉ la livrare</h3>
                                        <h2>{form_data['estimated_days']} zile lucrƒÉtoare</h2>
                                        <p>Data estimatƒÉ: {form_data['delivery_date'].strftime('%d %B %Y')}</p>
                                    </div>
                                    """, 
                                    unsafe_allow_html=True
                                )
                                
                                st.info(f"""
                                **üìß Ce urmeazƒÉ:**
                                1. ‚úÖ Ai primit chitan»õa pe email
                                2. üîî Vei primi o notificare c√¢nd √Æncepe procesarea
                                3. üîî Vei primi o notificare c√¢nd rendering-ul este gata
                                4. üìä Po»õi urmƒÉri progresul √Æn sec»õiunea "Tracking Progres"
                                5. üì• Vei primi link de download la finalizare
                                
                                **üìû Pentru √ÆntrebƒÉri:** bostiogstefania@gmail.com
                                """)
                                
                                # Reset form
                                st.session_state.order_submitted = False
                                st.session_state.form_data = {}
                                st.session_state.upload_option = "üìé √éncarcƒÉ fi»ôier"

    # Sec»õiunea pre»õuri
    elif menu == "üí∞ Pre»õuri & Termene":
        st.header("üí∞ Pre»õuri & Termene de Livrare")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üí∂ Pre»õuri pe Rezolu»õie")
            st.markdown("""
            | Rezolu»õie | Pre»õ EUR |
            |-----------|----------|
            | 2-4K | 70 EUR |
            | 4-6K | 100 EUR |
            | 8K+ | 120 EUR |
            
            *+50% pentru comenzi urgente*
            """)
            
            st.subheader("üöÄ Op»õiune UrgentƒÉ")
            st.markdown("""
            ‚Ä¢ **+50%** din pre»õul base
            ‚Ä¢ **Timp de procesare redus la jumƒÉtate**
            ‚Ä¢ **Procesare prioritarƒÉ**
            """)
        
        with col2:
            st.subheader("‚è∞ Termene de Livrare")
            st.markdown("""
            | RandƒÉri | Zile LucrƒÉtoare |
            |---------|-----------------|
            | 1-3 | 3 zile |
            | 4-7 | 6 zile |
            | 8-10 | 9 zile |
            | 11-13 | 12 zile |
            | 14-15 | 15 zile |
            | 16+ | din 3 √Æn 3 zile |
            """)
            
            st.subheader("üí≥ Metode de PlatƒÉ")
            st.markdown("""
            ‚Ä¢ **Revolut** - [revolut.me/stefanxuhy](https://revolut.me/stefanxuhy)
            ‚Ä¢ **Transfer Bancar** - Libra Bank
            ‚Ä¢ **PayPal** - bostiogstefania@gmail.com
            """)

    # Sec»õiunea notificƒÉri
    elif menu == "üîî NotificƒÉri":
        st.header("üîî NotificƒÉri »ôi AlertƒÉ")
        
        # CƒÉutare comanda pentru notificƒÉri
        st.subheader("üìã CautƒÉ Comanda")
        col1, col2 = st.columns([2, 1])
        with col1:
            order_search = st.text_input("Introdu ID-ul comenzii sau email-ul:")
        with col2:
            search_type = st.radio("CautƒÉ dupƒÉ:", ["ID ComandƒÉ", "Email"], horizontal=True)
        
        if order_search:
            if search_type == "ID ComandƒÉ":
                try:
                    order_id = int(order_search)
                    orders = service.get_orders()
                    order = orders[orders['id'] == order_id]
                    if not order.empty:
                        notifications = service.notification_service.get_notifications(order_id=order_id)
                    else:
                        st.error("‚ùå Comanda nu a fost gƒÉsitƒÉ!")
                        notifications = pd.DataFrame()
                except:
                    st.error("‚ùå ID invalid! Te rog introdu un numƒÉr valid.")
                    notifications = pd.DataFrame()
            else:
                orders = service.get_orders()
                order = orders[orders['email'] == order_search]
                if not order.empty:
                    order_id = order.iloc[0]['id']
                    notifications = service.notification_service.get_notifications(order_id=order_id)
                else:
                    st.error("‚ùå Nu s-au gƒÉsit comenzi pentru acest email!")
                    notifications = pd.DataFrame()
            
            if not notifications.empty:
                st.subheader(f"üì¨ NotificƒÉri pentru Comanda #{order_id}")
                
                for _, notification in notifications.iterrows():
                    col1, col2 = st.columns([4, 1])
                    with col1:
                        display_notification(
                            f"**{notification['timestamp']}** - {notification['message']}",
                            notification['type']
                        )
                    with col2:
                        if not notification['read']:
                            if st.button("‚úì MarcheazƒÉ cititƒÉ", key=f"read_{notification['id']}"):
                                service.notification_service.mark_as_read(notification['id'])
                                st.rerun()
            else:
                st.info("‚ÑπÔ∏è Nu existƒÉ notificƒÉri pentru aceastƒÉ comandƒÉ.")
        
        # NotificƒÉri generale pentru administrator
        st.subheader("üì¢ NotificƒÉri Sistem")
        all_notifications = service.notification_service.get_notifications(unread_only=True)
        if not all_notifications.empty:
            for _, notification in all_notifications.iterrows():
                display_notification(
                    f"**Comanda #{notification['order_id']}** - {notification['message']}",
                    notification['type']
                )
        else:
            st.info("üéâ Nu existƒÉ notificƒÉri noi!")

    # Sec»õiunea tracking progres
    elif menu == "üìä Tracking Progres":
        st.header("üìä Tracking Progres Rendering")
        
        # CƒÉutare comanda pentru tracking
        st.subheader("üîç CautƒÉ Comanda pentru Tracking")
        col1, col2 = st.columns([2, 1])
        with col1:
            track_order_id = st.text_input("Introdu ID-ul comenzii:")
        with col2:
            if st.button("üîç CautƒÉ Comanda"):
                if track_order_id:
                    try:
                        order_id = int(track_order_id)
                        order = service.get_order_by_id(order_id)
                        if not order.empty and order.iloc[0]['is_deleted'] == 0:
                            st.session_state.track_order_id = order_id
                            st.rerun()
                        else:
                            st.error("‚ùå Comanda nu a fost gƒÉsitƒÉ sau a fost »ôtearsƒÉ!")
                    except:
                        st.error("‚ùå ID invalid! Te rog introdu un numƒÉr valid.")
        
        # Afi»ôare progres pentru comanda selectatƒÉ
        if 'track_order_id' in st.session_state:
            order_id = st.session_state.track_order_id
            order = service.get_order_by_id(order_id)
            
            if not order.empty:
                order_data = order.iloc[0]
                
                st.subheader(f"üìà Progres Comanda #{order_id}")
                st.write(f"**üë§ Client:** {order_data['student_name']}")
                st.write(f"**üìß Email:** {order_data['email']}")
                st.write(f"**üõ†Ô∏è Software:** {order_data['software']}")
                st.write(f"**üéØ Rezolu»õie:** {order_data['resolution']}")
                
                # BarƒÉ de progres
                progress = order_data['progress']
                current_stage = order_data['current_stage']
                
                st.markdown("### üéØ Stadiu Curent")
                display_progress_bar(progress, current_stage)
                
                # Etapele procesului
                st.markdown("### üìã Etape Proces")
                stages = [
                    {"name": "üì• Prelucrare fi»ôier", "progress": 17},
                    {"name": "üé® Setup scenƒÉ", "progress": 33},
                    {"name": "üí° Configurare iluminare", "progress": 50},
                    {"name": "üõ†Ô∏è Optimizare materiale", "progress": 67},
                    {"name": "üöÄ Rendering", "progress": 83},
                    {"name": "‚úÖ Finalizare »ôi verificare", "progress": 100}
                ]
                
                for i, stage in enumerate(stages):
                    completed = i < order_data['stages_completed']
                    current = i == order_data['stages_completed'] - 1
                    
                    icon = "‚úÖ" if completed else "‚è≥"
                    if current: icon = "üéØ"
                    
                    st.write(f"{icon} {stage['name']} {'***(Curent)***' if current else ''}")
                
                # Istoric progres
                st.markdown("### üìä Istoric Progres")
                progress_history = service.get_progress_history(order_id)
                if not progress_history.empty:
                    for _, history in progress_history.iterrows():
                        st.write(f"**{history['timestamp']}** - {history['stage']} ({history['progress']}%)")
                        if history['notes']:
                            st.write(f"*Noti»õe: {history['notes']}*")
                        st.divider()
                else:
                    st.info("üìù √éncƒÉ nu existƒÉ istoric de progres.")
                
                # Buton pentru refresh
                if st.button("üîÑ ActualizeazƒÉ Progres"):
                    st.rerun()
            
            else:
                st.error("‚ùå Comanda nu a fost gƒÉsitƒÉ!")
                if 'track_order_id' in st.session_state:
                    del st.session_state.track_order_id

    # Sec»õiunea de administrare
    elif menu == "‚öôÔ∏è Administrare":
        st.header("‚öôÔ∏è Administrare Comenzi")
        
        # Verificare parolƒÉ
        try:
            correct_password = st.secrets["ADMIN_PASSWORD"]
        except:
            correct_password = os.getenv('ADMIN_PASSWORD', 'Admin123!')
        
        admin_password = st.text_input("ParolƒÉ administrare:", type="password")
        
        if admin_password == correct_password:
            st.success("‚úÖ Acces administrativ acordat")
            
            # Submeniu √Æn administrare
            admin_menu = st.radio("Alege sec»õiunea:", 
                                ["üìä Dashboard Comenzi", "üéØ Gestionare Comenzi", "üìà Statistici", "üóëÔ∏è Comenzi »òterse", "üöÄ Management Progres"],
                                horizontal=True)
            
            if admin_menu == "üöÄ Management Progres":
                st.subheader("üöÄ Management Progres Rendering")
                
                orders_df = service.get_orders()
                active_orders = orders_df[orders_df['status'].isin(['pending', 'processing'])]
                
                if not active_orders.empty:
                    for _, order in active_orders.iterrows():
                        with st.expander(f"#{order['id']} - {order['student_name']} - Progres: {order['progress']}%"):
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.write(f"**üìß Email:** {order['email']}")
                                st.write(f"**üõ†Ô∏è Software:** {order['software']}")
                                st.write(f"**üéØ Rezolu»õie:** {order['resolution']}")
                                st.write(f"**üñºÔ∏è RandƒÉri:** {order['render_count']}")
                                st.write(f"**üìä Progres curent:** {order['progress']}%")
                                st.write(f"**üéØ Stadiu curent:** {order['current_stage']}")
                                st.write(f"**üìß Notificare progres:** {'‚úÖ Trimis' if order['progress_email_sent'] else '‚ùå Nepreluat'}")
                                st.write(f"**üìß Notificare finalizare:** {'‚úÖ Trimis' if order['completed_email_sent'] else '‚ùå Nepreluat'}")
                            
                            with col2:
                                # Actualizare progres
                                new_progress = st.slider(f"Progres #{order['id']}", 0, 100, order['progress'])
                                stages = [
                                    "√én a»ôteptare",
                                    "üì• Prelucrare fi»ôier",
                                    "üé® Setup scenƒÉ", 
                                    "üí° Configurare iluminare",
                                    "üõ†Ô∏è Optimizare materiale",
                                    "üöÄ Rendering",
                                    "‚úÖ Finalizare »ôi verificare"
                                ]
                                new_stage = st.selectbox(f"Stadiu #{order['id']}", stages, 
                                                       index=stages.index(order['current_stage']) if order['current_stage'] in stages else 0)
                                notes = st.text_area(f"Noti»õe #{order['id']}", placeholder="Detalii despre progres...")
                                
                                if st.button(f"üíæ ActualizeazƒÉ Progres #{order['id']}"):
                                    if service.update_progress(order['id'], new_progress, new_stage, notes):
                                        st.success(f"‚úÖ Progresul pentru comanda #{order['id']} a fost actualizat!")
                                        time.sleep(1)
                                        st.rerun()
                                
                                # DacƒÉ progresul este 100%, oferƒÉ op»õiunea de a marca ca completat
                                if new_progress == 100:
                                    if st.button(f"üéâ FinalizeazƒÉ Comanda #{order['id']}"):
                                        if service.update_order_status(order['id'], 'completed'):
                                            service.notification_service.add_notification(
                                                order['id'],
                                                "üéâ Rendering finalizat! Proiectul este gata pentru descƒÉrcare.",
                                                "success",
                                                order['email']
                                            )
                                            st.success(f"‚úÖ Comanda #{order['id']} a fost finalizatƒÉ!")
                                            time.sleep(1)
                                            st.rerun()
                
                else:
                    st.info("üì≠ Nu existƒÉ comenzi active pentru managementul progresului.")
            
            elif admin_menu == "üéØ Gestionare Comenzi":
                st.subheader("üéØ Gestionare Comenzi")
                
                orders_df = service.get_orders()
                
                if not orders_df.empty:
                    for _, order in orders_df.iterrows():
                        with st.expander(f"#{order['id']} - {order['student_name']} - {order['price_euro']} EUR - {order['status']}"):
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.write(f"**üìß Email:** {order['email']}")
                                st.write(f"**üì± Telefon:** {order.get('contact_phone', 'Nespecificat')}")
                                st.write(f"**üí∂ Pre»õ:** {order['price_euro']} EUR")
                                st.write(f"**üè´ Facultate:** {order.get('faculty', 'NespecificatƒÉ')}")
                                st.write(f"**üìä Progres:** {order['progress']}%")
                                st.write(f"**üéØ Stadiu:** {order['current_stage']}")
                                st.write(f"**üìß Notificare progres:** {'‚úÖ Trimis' if order['progress_email_sent'] else '‚ùå Nepreluat'}")
                                st.write(f"**üìß Notificare finalizare:** {'‚úÖ Trimis' if order['completed_email_sent'] else '‚ùå Nepreluat'}")
                                
                                # Afi»ôare corectƒÉ fi»ôier/link
                                project_file = order.get('project_file')
                                project_link = order.get('project_link')
                                
                                if project_file and project_file != 'None':
                                    st.write(f"**üì¶ Fi»ôier √ÆncƒÉrcat:** {project_file}")
                                elif project_link and project_link != 'None':
                                    st.write(f"**üîó Link proiect:** {project_link}")
                                else:
                                    st.write("**üì¶ Proiect:** Niciun fi»ôier/link furnizat")
                                
                                st.write(f"**üìã Cerin»õe:** {order['requirements'] or 'Niciune specificatƒÉ'}")
                            
                            with col2:
                                # Actualizare status
                                new_status = st.selectbox(
                                    f"Status #{order['id']}",
                                    ["pending", "processing", "completed"],
                                    index=["pending", "processing", "completed"].index(order['status']),
                                    key=f"status_{order['id']}"
                                )
                                
                                # Link download
                                download_link = st.text_input(
                                    "üîó Link download",
                                    value=order['download_link'] or "",
                                    placeholder="https://drive.google.com/...",
                                    key=f"download_{order['id']}"
                                )
                                
                                # Butoane ac»õiune
                                col_btn1, col_btn2 = st.columns(2)
                                with col_btn1:
                                    if st.button(f"üíæ SalveazƒÉ", key=f"btn_save_{order['id']}"):
                                        if service.update_order_status(order['id'], new_status, download_link or None):
                                            st.success(f"‚úÖ Comanda #{order['id']} actualizatƒÉ!")
                                            time.sleep(1)
                                            st.rerun()
                                
                                with col_btn2:
                                    # Gestionare »ôtergere
                                    if f"show_del_manage_{order['id']}" not in st.session_state:
                                        st.session_state[f"show_del_manage_{order['id']}"] = False
                                        
                                    if not st.session_state[f"show_del_manage_{order['id']}"]:
                                        if st.button(f"üóëÔ∏è »òterge", key=f"del_btn_{order['id']}"):
                                            st.session_state[f"show_del_manage_{order['id']}"] = True
                                            st.rerun()
                                    else:
                                        reason = st.text_input(
                                            f"Motiv »ôtergere:", 
                                            placeholder="ex: anulat de client",
                                            key=f"del_reason_{order['id']}"
                                        )
                                        col_del_confirm, col_del_cancel = st.columns(2)
                                        with col_del_confirm:
                                            if st.button(f"‚úÖ Confirm »ôtergere", key=f"del_confirm_{order['id']}"):
                                                if reason.strip():
                                                    if service.delete_order(order['id'], reason):
                                                        st.success(f"‚úÖ Comanda #{order['id']} »ôtearsƒÉ!")
                                                        st.session_state[f"show_del_manage_{order['id']}"] = False
                                                        time.sleep(1)
                                                        st.rerun()
                                                else:
                                                    st.error("‚ö†Ô∏è Te rog introdu un motiv pentru »ôtergere!")
                                        with col_del_cancel:
                                            if st.button("‚ùå AnuleazƒÉ", key=f"del_cancel_{order['id']}"):
                                                st.session_state[f"show_del_manage_{order['id']}"] = False
                                                st.rerun()
                
                else:
                    st.info("üì≠ Nu existƒÉ comenzi √Æn sistem.")
            
            elif admin_menu == "üìä Dashboard Comenzi":
                st.subheader("üìä Dashboard Comenzi")
                
                orders_df = service.get_orders()
                
                if not orders_df.empty:
                    # Statistici extinse
                    total_orders = len(orders_df)
                    total_revenue = orders_df['price_euro'].sum()
                    pending_orders = len(orders_df[orders_df['status'] == 'pending'])
                    processing_orders = len(orders_df[orders_df['status'] == 'processing'])
                    completed_orders = len(orders_df[orders_df['status'] == 'completed'])
                    
                    # Progres mediu
                    avg_progress = orders_df['progress'].mean()
                    
                    col1, col2, col3, col4, col5 = st.columns(5)
                    with col1:
                        st.metric("Total Comenzi", total_orders)
                    with col2:
                        st.metric("Venit Total", f"{total_revenue:.0f} EUR")
                    with col3:
                        st.metric("√én A»ôteptare", pending_orders)
                    with col4:
                        st.metric("√én Procesare", processing_orders)
                    with col5:
                        st.metric("Progres Mediu", f"{avg_progress:.1f}%")
                    
                    # Filtre
                    col1, col2 = st.columns(2)
                    with col1:
                        status_filter = st.selectbox("FiltreazƒÉ dupƒÉ status:", 
                                                   ["Toate", "pending", "processing", "completed"])
                    with col2:
                        if st.button("üîÑ ActualizeazƒÉ Dashboard"):
                            st.rerun()
                    
                    # Afi»ôare comenzi cu progres
                    filtered_df = orders_df if status_filter == "Toate" else orders_df[orders_df['status'] == status_filter]
                    
                    for _, order in filtered_df.iterrows():
                        with st.container():
                            col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
                            
                            with col1:
                                st.subheader(f"#{order['id']} - {order['student_name']}")
                                st.write(f"**üìß {order['email']}** ‚Ä¢ **üì± {order.get('contact_phone', 'Nespecificat')}**")
                                st.write(f"**üéØ {order['resolution']}** ‚Ä¢ **üñºÔ∏è {order['render_count']} randƒÉri** ‚Ä¢ **üí∞ {order['price_euro']} EUR**")
                                
                                # BarƒÉ de progres inline
                                progress = order['progress']
                                st.write(f"**üìä Progres:** {progress}% - {order['current_stage']}")
                                st.progress(progress / 100)
                            
                            with col2:
                                status_color = {
                                    'pending': 'status-pending',
                                    'processing': 'status-processing', 
                                    'completed': 'status-completed'
                                }.get(order['status'], '')
                                
                                st.markdown(f'<div class="{status_color}"><strong>Status:</strong> {order["status"].upper()}</div>', 
                                          unsafe_allow_html=True)
                                
                                if order['is_urgent']:
                                    st.markdown('<div class="urgent"><strong>üöÄ URGENT</strong></div>', 
                                              unsafe_allow_html=True)
                            
                            with col3:
                                if order['download_link']:
                                    st.markdown(f"[üì• Download]({order['download_link']})")
                                created = datetime.strptime(order['created_at'][:10], '%Y-%m-%d')
                                days_passed = (datetime.now() - created).days
                                days_left = max(0, order['estimated_days'] - days_passed)
                                st.markdown(f"**‚è≥ {days_left}z rƒÉmase**")
                            
                            with col4:
                                # Buton »ôtergere
                                if f"show_delete_{order['id']}" not in st.session_state:
                                    st.session_state[f"show_delete_{order['id']}"] = False
                                
                                if not st.session_state[f"show_delete_{order['id']}"]:
                                    if st.button("üóëÔ∏è", key=f"delete_btn_{order['id']}"):
                                        st.session_state[f"show_delete_{order['id']}"] = True
                                        st.rerun()
                                else:
                                    reason = st.text_input(
                                        f"Motiv »ôtergere #{order['id']}:", 
                                        placeholder="ex: anulat de client, eroare, etc.",
                                        key=f"reason_{order['id']}"
                                    )
                                    if st.button("‚úÖ ConfirmƒÉ »ôtergere", key=f"confirm_del_{order['id']}"):
                                        if reason.strip():
                                            if service.delete_order(order['id'], reason):
                                                st.success(f"‚úÖ Comanda #{order['id']} a fost »ôtearsƒÉ!")
                                                st.session_state[f"show_delete_{order['id']}"] = False
                                                time.sleep(1)
                                                st.rerun()
                                        else:
                                            st.error("‚ö†Ô∏è Te rog introdu un motiv pentru »ôtergere!")
                                    
                                    if st.button("‚ùå AnuleazƒÉ", key=f"cancel_del_{order['id']}"):
                                        st.session_state[f"show_delete_{order['id']}"] = False
                                        st.rerun()
                            
                            st.divider()
                
                else:
                    st.info("üì≠ Nu existƒÉ comenzi √Æn sistem.")
            
            elif admin_menu == "üìà Statistici":
                st.subheader("üìà Statistici Avansate")
                
                orders_df = service.get_orders()
                
                if not orders_df.empty:
                    total_revenue = orders_df['price_euro'].sum()
                    completed_orders = len(orders_df[orders_df['status'] == 'completed'])
                    urgent_orders = len(orders_df[orders_df['is_urgent'] == True])
                    processing_orders = len(orders_df[orders_df['status'] == 'processing'])
                    avg_progress = orders_df['progress'].mean()
                    
                    col1, col2, col3, col4, col5 = st.columns(5)
                    with col1:
                        st.metric("Venit Total", f"{total_revenue:.0f} EUR")
                    with col2:
                        st.metric("Comenzi Finalizate", completed_orders)
                    with col3:
                        st.metric("Comenzi Urgente", urgent_orders)
                    with col4:
                        st.metric("√én Procesare", processing_orders)
                    with col5:
                        st.metric("Progres Mediu", f"{avg_progress:.1f}%")
                    
                    # Statistici pe software
                    st.subheader("üìä Statistici pe Software")
                    software_stats = orders_df['software'].value_counts()
                    st.bar_chart(software_stats)
                    
                    # Statistici pe rezolu»õie
                    st.subheader("üéØ Statistici pe Rezolu»õie")
                    resolution_stats = orders_df['resolution'].value_counts()
                    st.bar_chart(resolution_stats)
                    
                    # Export date
                    st.subheader("üì§ Export Date")
                    csv = orders_df.to_csv(index=False)
                    st.download_button(
                        "üì• ExportƒÉ CSV cu toate comenzile",
                        data=csv,
                        file_name=f"comenzi_rendering_{datetime.now().strftime('%Y%m%d')}.csv",
                        mime="text/csv"
                    )
                
                else:
                    st.info("üì≠ Nu existƒÉ comenzi √Æn sistem.")
            
            elif admin_menu == "üóëÔ∏è Comenzi »òterse":
                st.subheader("üóëÔ∏è Comenzi »òterse")
                
                # Ob»õine toate comenzile inclusiv cele »ôterse
                orders_df = service.get_orders(include_deleted=True)
                deleted_orders = orders_df[orders_df['is_deleted'] == 1]
                
                if not deleted_orders.empty:
                    st.info(f"üì≠ Sunt {len(deleted_orders)} comenzi »ôterse √Æn sistem.")
                    
                    for _, order in deleted_orders.iterrows():
                        with st.container():
                            col1, col2, col3 = st.columns([3, 2, 1])
                            
                            with col1:
                                st.markdown(f'<div class="deleted"><h4>#{order["id"]} - {order["student_name"]}</h4></div>', 
                                          unsafe_allow_html=True)
                                st.write(f"**üìß {order['email']}** ‚Ä¢ **üì± {order.get('contact_phone', 'Nespecificat')}**")
                                st.write(f"**üéØ {order['resolution']}** ‚Ä¢ **üñºÔ∏è {order['render_count']} randƒÉri** ‚Ä¢ **üí∞ {order['price_euro']} EUR**")
                                st.write(f"**üóëÔ∏è »òtearsƒÉ la:** {order['deleted_at']}")
                                if order['deletion_reason']:
                                    st.write(f"**üìù Motiv:** {order['deletion_reason']}")
                            
                            with col2:
                                col_restore, col_permanent = st.columns(2)
                                with col_restore:
                                    if st.button(f"üîÑ Restabile»ôte", key=f"restore_{order['id']}"):
                                        if service.restore_order(order['id']):
                                            st.success(f"‚úÖ Comanda #{order['id']} a fost restabilitƒÉ!")
                                            time.sleep(1)
                                            st.rerun()
                                with col_permanent:
                                    if st.button(f"üóëÔ∏è »òterge definitiv", key=f"perm_{order['id']}"):
                                        # Folosim session state pentru a gestiona confirmarea
                                        if f"confirm_perm_{order['id']}" not in st.session_state:
                                            st.session_state[f"confirm_perm_{order['id']}"] = False
                                        
                                        if st.session_state[f"confirm_perm_{order['id']}"]:
                                            if service.permanently_delete_order(order['id']):
                                                st.success(f"‚úÖ Comanda #{order['id']} a fost »ôtearsƒÉ definitiv!")
                                                st.session_state[f"confirm_perm_{order['id']}"] = False
                                                time.sleep(1)
                                                st.rerun()
                                        else:
                                            st.session_state[f"confirm_perm_{order['id']}"] = True
                                            st.warning(f"‚ùå Sigur vrei sƒÉ »ôtergi definitiv comanda #{order['id']}?")
                            
                            st.divider()
                    
                    # Buton pentru »ôtergerea tuturor comenzilor »ôterse
                    if st.button("üóëÔ∏è »òterge toate comenzile »ôterse definitiv", type="secondary"):
                        if "confirm_all_deleted" not in st.session_state:
                            st.session_state.confirm_all_deleted = False
                        
                        if st.session_state.confirm_all_deleted:
                            success_count = 0
                            for order_id in deleted_orders['id']:
                                if service.permanently_delete_order(order_id):
                                    success_count += 1
                            st.success(f"‚úÖ {success_count} comenzi »ôterse definitiv!")
                            st.session_state.confirm_all_deleted = False
                            time.sleep(1)
                            st.rerun()
                        else:
                            st.session_state.confirm_all_deleted = True
                            st.error("‚ùå CONFIRM: Sigur vrei sƒÉ »ôtergi definitiv TOATE comenzile marcate ca »ôterse?")
                
                else:
                    st.info("üéâ Nu existƒÉ comenzi »ôterse √Æn sistem.")
        
        elif admin_password and admin_password != correct_password:
            st.error("‚ùå ParolƒÉ incorectƒÉ!")
    
    # Sec»õiunea contact
    else:
        st.header("üìû Contact")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìß ContacteazƒÉ-ne")
            st.markdown("""
            **üìß Email:** bostiogstefania@gmail.com
            **üì± Telefon:** +40 724 911 299
            **üí¨ WhatsApp:** +40 724 911 299
            
            **üí≥ Metode de PlatƒÉ:**
            ‚Ä¢ **Revolut:** [revolut.me/stefanxuhy](https://revolut.me/stefanxuhy)
            ‚Ä¢ **Transfer Bancar:** 
              - Beneficiar: STEFANIA BOSTIOG
              - IBAN: RO60 BREL 0002 0036 6187 0100
              - BancƒÉ: Libra Bank

            **üïí Program:**
            Luni - Vineri: 9:00 - 18:00
            S√¢mbƒÉtƒÉ: 10:00 - 14:00
            DuminicƒÉ: √énchis
            """)
        
        with col2:
            st.subheader("üìç Despre Noi")
            st.markdown("""
            **üèóÔ∏è Rendering Service ARH**
            
            Servicii profesionale de rendering pentru:
            ‚Ä¢ Studen»õi la ArhitecturƒÉ
            ‚Ä¢ Arhitec»õi
            ‚Ä¢ Designeri
            
            **üéØ Calitate garantatƒÉ**
            ‚Ä¢ Renderings foto-realiste
            ‚Ä¢ Timp de livrare rapid
            ‚Ä¢ Support dedicat
            ‚Ä¢ Revisions incluse
            ‚Ä¢ Tracking progres √Æn timp real
            ‚Ä¢ NotificƒÉri automate
            """)

if __name__ == "__main__":
    main()
